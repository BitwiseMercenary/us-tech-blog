<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OpenTable Tech UK Blog</title>
  <subtitle>The technology blog for OpenTable UK.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tech.opentable.co.uk/"/>
  <updated>2016-11-09T16:43:13.793Z</updated>
  <id>http://tech.opentable.co.uk/</id>
  
  <author>
    <name>OpenTable</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>falcor-postman</title>
    <link href="http://tech.opentable.co.uk//blog/2016/11/09/falcor-postman/"/>
    <id>http://tech.opentable.co.uk//blog/2016/11/09/falcor-postman/</id>
    <published>2016-11-09T16:40:22.000Z</published>
    <updated>2016-11-09T16:43:13.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>At OpenTable, we have an engineering culture that empowers us to research, experiment and learn. </p>
<p>In an effort to foster innovation and to try new ideas, Chris Cartlidge, Nick Balestra, Tom Martin and myself started to work on a side project nicknamed big-mars. Our project is a mobile-first, responsive web application that uses Falcor by Netflix.</p>
<p>Falcor, a JavaScript library for efficient data fetching, is an implementation of the Backend for Frontend (BFF) or the API Gateway pattern.</p>
<p>One powerful concept that Falcor has is its query model, in which you access your data as if it was a single JSON model in memory.  You can navigate your data structure the way you would navigate a JSON object; either with a “dot notation” (e.g. restaurant.address.city) or with an “array notation” (e.g. restaurant[‘address’][‘city’]). </p>
<p>Really easy and intuitive.</p>
<p>However, while experimenting and learning how to properly use its query model, we noticed that it was quite hard to “visualise” the expected result from the API calls without using, for instance, our beloved in-browser Developer Tools console.<br>falcor-postman<br>The Falcor project released many additional packages in order to facilitate developers who are willing to use this technology (e.g. falcor-express) but in this ecosystem we noticed a lack of tools with a GUI on top.</p>
<p>We also noticed that the GraphQL, another project that shares with Falcor the same core concepts, has tools with visual interfaces (e.g. express-graphql and GraphiQL).</p>
<p>So as a spin-off of our big-mars project, Nick and I decided to build a tool with a nice and intuitive GUI responsible for exercising the Falcor endpoint in order to help us to validate our queries, and we named this tool falcor-postman.</p>
<p>So we decided to build falcor-postman as an Express.js middleware, making it easy to plug into an existing Falcor project that uses Express.js as a web application framework. We are releasing it as an Open Source Software project so that others can take advantage of it and hopefully speed up their own development lifecycle.</p>
<h2 id="The-features"><a href="#The-features" class="headerlink" title="The features"></a>The features</h2><p>When plugged into an existing Express.js application it will be possible to access a specific configurable route, showing a web page in which you can write Falcor queries and send them to your Falcor endpoint. Then the result of the query will be presented.</p>
<p>It will be also possible to resend previous queries and modify them, as they will be saved for you into your browser’s local storage.</p>
<h2 id="Under-the-hood"><a href="#Under-the-hood" class="headerlink" title="Under the hood"></a>Under the hood</h2><p>Falcor-postman is composed by an Express.js middleware responsible for serving the UI which is a React.js application. Webpack is our module bundler. We take advantage of hot reloading in development mode while for the production release we create a physical file containing the bundle.</p>
<p>In addition we are using (Pure.css)[<a href="https://www.google.com/url?q=http://purecss.io/&amp;sa=D&amp;ust=1478712977463000&amp;usg=AFQjCNGphk7heIMv-7mOTvwgUiWIrqUfXQ" target="_blank" rel="external">https://www.google.com/url?q=http://purecss.io/&amp;sa=D&amp;ust=1478712977463000&amp;usg=AFQjCNGphk7heIMv-7mOTvwgUiWIrqUfXQ</a>] and Codemirror that are helping us with the UI, and we are also using eslint-config-opentable (another OpenTable open source project) as our .eslintrc config.</p>
<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>falcor-postman v1.0.0 has just been released on npm and we’re awaiting feedback. Also, we have some issues in our GitHub repository which we will use to build our own product roadmap.</p>
<p>In the short term we would like to fix some outstanding minor issues that we are aware of (polishing the UI, enhancing the query history) but in the long term we would also like to enable data update; at the moment, our middleware only enables fetches but we’d like to better reflect the full functionality of Falcor, which allows for updates as well.</p>
<h2 id="One-final-comment"><a href="#One-final-comment" class="headerlink" title="One final comment"></a>One final comment</h2><p>At OpenTable we love OSS and we truly believe that sharing knowledge and experiences is one of the best ways for learning and growing as engineers. We highly encourage you to reach out to us if you would like to discuss your experience with us or simply would like to understand better what we do.</p>
<h2 id="Links-and-resources"><a href="#Links-and-resources" class="headerlink" title="Links and resources"></a>Links and resources</h2><p>falcor-postman’s GitHub repository<br>Falcor’s website</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Context&quot;&gt;&lt;a href=&quot;#Context&quot; class=&quot;headerlink&quot; title=&quot;Context&quot;&gt;&lt;/a&gt;Context&lt;/h2&gt;&lt;p&gt;At OpenTable, we have an engineering culture that empowers us to research, experiment and learn. &lt;/p&gt;
&lt;p&gt;In an effort to foster innovation and to try new ideas, Chris Cartlidge, Nick Balestra, Tom Martin and myself started to work on a side project nicknamed big-mars. Our project is a mobile-first, responsive web application that uses Falcor by Netflix.&lt;/p&gt;
&lt;p&gt;Falcor, a JavaScript library for efficient data fetching, is an implementation of the Backend for Frontend (BFF) or the API Gateway pattern.&lt;/p&gt;
&lt;p&gt;One powerful concept that Falcor has is its query model, in which you access your data as if it was a single JSON model in memory.  You can navigate your data structure the way you would navigate a JSON object; either with a “dot notation” (e.g. restaurant.address.city) or with an “array notation” (e.g. restaurant[‘address’][‘city’]). &lt;/p&gt;
&lt;p&gt;Really easy and intuitive.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Falcor" scheme="http://tech.opentable.co.uk/blog/categories/Falcor/"/>
    
  </entry>
  
  <entry>
    <title>OpenComponents - microservices in the front-end world</title>
    <link href="http://tech.opentable.co.uk//blog/2016/04/27/opencomponents-microservices-in-the-front-end-world/"/>
    <id>http://tech.opentable.co.uk//blog/2016/04/27/opencomponents-microservices-in-the-front-end-world/</id>
    <published>2016-04-27T11:10:00.000Z</published>
    <updated>2016-10-24T12:49:12.467Z</updated>
    
    <content type="html"><![CDATA[<p>Many engineers work every day on opentable.com from our offices located in Europe, America, and Asia, pushing changes to production multiple times a day. Usually, this is very hard to achieve, in fact it took years for us to get to this point. <a href="/blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/">I described in a previous article</a> how we dismantled our monolith in favour of a Microsites architecture. Since the publication of that blog post we have been working on something I believe to be quite unique, called <strong>OpenComponents</strong>.</p>
<h3 id="Another-front-end-framework"><a href="#Another-front-end-framework" class="headerlink" title="Another front-end framework?"></a>Another front-end framework?</h3><p>OpenComponents is a system to facilitate code sharing, reduce dependencies, and easily approach new features and experiments from the back-end to the front-end. To achieve this, it is based on the concept of using services as interfaces - enabling pages to render partial content that is located, executed and deployed independently.</p>
<p>OpenComponents is not <em>another SPA JS framework</em>; it is a set of conventions, patterns and tools to develop and quickly deploy fragments of front-end. In this perspective, it plays nicely with any existing architecture and framework in terms of front-end and back-end. Its purpose is to <strong>serve as delivery mechanism for a more modularised end-result in the front-end</strong>.</p>
<p>OC is been in production for more than a year at OpenTable and it is <a href="https://github.com/opentable/oc" target="_blank" rel="external">fully open-sourced</a>.</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>OpenComponents involves two parts:</p>
<ul>
<li>The <strong>consumers</strong> are web pages that need fragments of HTML for rendering partial contents. Sometimes they need some content during server-side rendering, somethings when executing code in the browser.</li>
<li>The <strong>components</strong> are small units of isomorphic code mainly consisting of HTML, Javascript and CSS. They can optionally contain some logic, allowing a server-side Node.js closure to compose a model that is used to render the view. When rendered they are pieces of HTML, ready to be injected in any web page.</li>
</ul>
<p>The framework consists of three parts:</p>
<ul>
<li>The <strong>cli</strong> allows developers to create, develop, test, and publish components.</li>
<li>The <strong>library</strong> is where the components are stored after the publishing. When components depend on static resources (such as images, CSS files, etc.) these are stored, during packaging and publishing, in a publicly-exposed part of the library that serves as a CDN.</li>
<li>The <strong>registry</strong> is a REST API that is used to consume components. It is the entity that handles the traffic between the library and the consumers.</li>
</ul>
<p>In the following example, you can see how a web page looks like when including both a server-side rendered component (<em>header</em>) and client-side (still) unrendered component (<em>advert</em>):</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">oc-component</span> <span class="attr">href</span>=<span class="string">"//oc-registry.com/header/1.X.X"</span> <span class="attr">data-rendered</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//cdn.com/oc/header/1.2.3/img/logo.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">oc-component</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>page content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">oc-component</span> <span class="attr">href</span>=<span class="string">"//oc-registry.com/advert/~1.3.5/?type=bottom"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">oc-component</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//oc-registry/oc-client/client.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>The only prerequisite for creating a component is Node.js:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install -g oc</div><div class="line">$ mkdir components &amp;&amp; <span class="built_in">cd</span> components</div><div class="line">$ oc init my-component</div></pre></td></tr></table></figure>
<p>Components are folders containing the following files:</p>
<table style="margin-bottom:16px;"><br>    <tr><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">File</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Description</th><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">package.json</td><br>        <td style="padding:5px 10px;font-weight: inherit;">A common <a href="https://docs.npmjs.com/files/package.json" target="_blank">node’s package.json</a>. An “oc” property contains some additional configuration.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">view.html</td><br>        <td style="padding:5px 10px;font-weight: inherit;">The view containing the markup. Currently Handlebars and Jade view engines are supported. It can contain some CSS under the &lt;style&gt; tag and client-side Javascript under the &lt;script&gt; tag.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">server.js (optional)</td><br>        <td style="padding:5px 10px;font-weight: inherit;">If the component has some logic, including consuming services, this is the entity that will produce the view-model to compile the view.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">static files (optional)</td><br>        <td style="padding:5px 10px;font-weight: inherit;">Images, Javascript, and files that will be referenced in the HTML markup.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">*</td><br>        <td style="padding:5px 10px;font-weight: inherit;">Any other files that will be useful for the development such as tests, docs, etc.</td><br>    </tr><br></table>

<h2 id="Editing-debugging-testing"><a href="#Editing-debugging-testing" class="headerlink" title="Editing, debugging, testing"></a>Editing, debugging, testing</h2><p>To start a local test registry using a components’ folder as a library with a watcher:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ oc dev . 3030</div></pre></td></tr></table></figure></p>
<p>To see how the component looks like when consuming it:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ oc preview http://localhost:3030/hello-world</div></pre></td></tr></table></figure></p>
<p>As soon as you make changes on the component, you will be able to refresh this page and see how it looks. This an example for a component that handles some minimal logic:</p>

undefined


<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="built_in">module</span>.exports.data = <span class="function"><span class="keyword">function</span>(<span class="params">context, callback</span>)</span>&#123;</div><div class="line">  callback(<span class="literal">null</span>, &#123;</div><div class="line">    <span class="attr">name</span>: context.params.name || <span class="string">'John Doe'</span></div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>To test this component, we can curl <code>http://localhost:3030/my-component/?name=Jack</code>.</p>
<h3 id="Publishing-to-a-registry"><a href="#Publishing-to-a-registry" class="headerlink" title="Publishing to a registry"></a>Publishing to a registry</h3><p>You will need an online registry connected to a library. A component with the same name and version cannot already exist on that registry.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># just once we create a link between the current folder and a registry endpoint</span></div><div class="line">$ oc registry add http://my-components-registry.mydomain.com</div><div class="line"></div><div class="line"><span class="comment"># then, ship it</span></div><div class="line">$ oc publish my-component/</div></pre></td></tr></table></figure>
<p>Now, it should be available at <code>http://my-components-registry.mydomain.com/my-component</code>.</p>
<h2 id="Consuming-components"><a href="#Consuming-components" class="headerlink" title="Consuming components"></a>Consuming components</h2><p>From a consumer’s perspective, a component is an HTML fragment. You can render components just on the client-side, just on the server-side, or use the client-side rendering as failover strategy for when the server-side rendering fails (for example because the registry is not responding quickly or it is down).</p>
<p>You don’t need Node.js to consume components on the server-side. The registry can provide rendered components so that you can consume them using any tech stack.</p>
<p>When published, components are immutable and semantic versioned. The registry allows consumers to get any version of the component: the latest patch, or minor version, etc. For instance, <code>http://registry.com/component</code> serves the latest version, and <code>http://registry.com/component/^1.2.5</code> serves the most recent major version for v1.</p>
<h3 id="Client-side-rendering"><a href="#Client-side-rendering" class="headerlink" title="Client-side rendering"></a>Client-side rendering</h3><p>To make this happen, a components’ registry has to be publicly available.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">oc-component</span> <span class="attr">href</span>=<span class="string">"//my-components-registry.mydomain.com/hello-world/1.X.X"</span>&gt;</span><span class="tag">&lt;/<span class="name">oc-component</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//my-components-registry.mydomain.com/oc-client/client.js"</span> /&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure></p>
<h3 id="Server-side-rendering"><a href="#Server-side-rendering" class="headerlink" title="Server-side rendering"></a>Server-side rendering</h3><p>You can get rendered components via the registry REST API.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">curl http://my-components-registry.mydomain.com/hello-world</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"href"</span>: <span class="string">"https://my-components-registry.mydomain.com/hello-world"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"requestVersion"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"html"</span>: <span class="string">"&lt;oc-component href=\"https://my-components-registry.mydomain.com/hello-world\" data-hash=\"cad2a9671257d5033d2abfd739b1660993021d02\" data-name=\"hello-world\" data-rendered=\"true\" data-version=\"1.0.13\"&gt;Hello John doe!&lt;/oc-component&gt;"</span>,</div><div class="line">  <span class="string">"type"</span>: <span class="string">"oc-component"</span>,</div><div class="line">  <span class="string">"renderMode"</span>: <span class="string">"rendered"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Nevertheless, for improving caching and response size, when doing browser rendering, or using the <code>node.js</code> client or any language capable of executing server-side Javascript the request will look more like:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> curl http://my-components-registry.mydomain.com/hello-world/~1.0.0 -H Accept:application/vnd.oc.unrendered+json</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"href"</span>: <span class="string">"https://my-components-registry.mydomain.com/hello-world/~1.0.0"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"hello-world"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"requestVersion"</span>: <span class="string">"~1.0.0"</span>,</div><div class="line">  <span class="string">"data"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"John doe"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"template"</span>: &#123;</div><div class="line">    <span class="string">"src"</span>: <span class="string">"https://s3.amazonaws.com/your-s3-bucket/components/hello-world/1.0.0/template.js"</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="string">"handlebars"</span>,</div><div class="line">    <span class="string">"key"</span>: <span class="string">"cad2a9671257d5033d2abfd739b1660993021d02"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"type"</span>: <span class="string">"oc-component"</span>,</div><div class="line">  <span class="string">"renderMode"</span>: <span class="string">"unrendered"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Making a similar request it is possible to get the compiled view’s url + the view-model as data. This is useful for caching the compiled view (taking advantage of components’ immutability).</p>
<h2 id="Setup-a-registry"><a href="#Setup-a-registry" class="headerlink" title="Setup a registry"></a>Setup a registry</h2><p>The registry is a Node.js Express app that serves the components. It just needs an S3 account to be used as library.</p>
<p>First, create a dir and install OC:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir oc-registry &amp;&amp; <span class="built_in">cd</span> oc-registry</div><div class="line">$ npm init</div><div class="line">$ npm install oc --save</div><div class="line">$ touch index.js</div></pre></td></tr></table></figure></p>
<p>This is how <code>index.js</code> will look like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oc = <span class="built_in">require</span>(<span class="string">'oc'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> configuration = &#123;</div><div class="line">  <span class="attr">verbosity</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">baseUrl</span>: <span class="string">'https://my-components-registry.mydomain.com/'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</div><div class="line">  <span class="attr">tempDir</span>: <span class="string">'./temp/'</span>,</div><div class="line">  <span class="attr">refreshInterval</span>: <span class="number">600</span>,</div><div class="line">  <span class="attr">pollingInterval</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">s3</span>: &#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">'your-s3-key'</span>,</div><div class="line">    <span class="attr">secret</span>: <span class="string">'your-s3-secret'</span>,</div><div class="line">    <span class="attr">bucket</span>: <span class="string">'your-s3-bucket'</span>,</div><div class="line">    <span class="attr">region</span>: <span class="string">'your-s3-region'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'//s3.amazonaws.com/your-s3-bucket/'</span>,</div><div class="line">    <span class="attr">componentsDir</span>: <span class="string">'components'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">env</span>: &#123; <span class="attr">name</span>: <span class="string">'production'</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> registry = <span class="keyword">new</span> oc.Registry(configuration);</div><div class="line"></div><div class="line">registry.start(<span class="function"><span class="keyword">function</span>(<span class="params">err, app</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Registry not started: '</span>, err);</div><div class="line">    process.exit(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>After more than a year in production, OC is still evolving. These are some of the most powerful features:</p>
<ul>
<li>It <strong>enables developers to create and publish components very easily</strong>. None of the operations need any infrastructural work as the framework takes care, when packaging, of making each component <em>production-ready</em>.</li>
<li>It is <strong>framework agnostic</strong>. Microsites written in <em>C#</em>, <em>Node</em> and <em>Ruby</em> consume components on the server-side via the API. In the front-end, it is great for delivering neutral pieces of HTML but works well for Angular components and React views too.</li>
<li>It enables <strong>granular ownership</strong>. Many teams can own components and they all are discoverable via the same service.</li>
<li>Isomorphism is good for <strong>performance</strong>. It enables consumers to render things on the server-side when needed (mobile apps, SEO) and defer to the client-side contents that are not required on the first load (third-party widgets, adverts, SPA fragments).</li>
<li>Isomorphism is good for <strong>robustness</strong>. When something is going bad on the server-side (the registry is erroring or slow) it is possible to use client-side rendering as a fail-over mechanism. The Node.js client does this by default.</li>
<li>It is a good approach for <strong>experimentation</strong>. People can work closely to the business to create widgets that are capable of both getting data from back-end services and deliver them via rich UIs. We very often had teams that were able to create and instrument tests created via OC in less then 24 hours.</li>
<li>Semver and auto-generated documentation <strong>enforce clear contracts</strong>. Consumers can pick the version they want and component owners can keep clear what the contract is.</li>
<li>A more componentised front-end leads to write <strong>more easily destroyable code</strong>. As opposite of writing highly maintainable code, this approach promotes small iterations on very small, easily readable and testable units of code. In this perspective, recreating something from scratch is perfectly acceptable and recommended, as there is almost zero cost for a developer to start a new project and the infrastructure in place makes maintainance and deprecation as easy as a couple of clicks. </li>
</ul>
<p>If you wish to try or know more about OpenComponents, visit <a href="https://github.com/opentable/oc" target="_blank" rel="external">OC’s github page</a> or have a look at <a href="https://github.com/matteofigus/oc-components-examples" target="_blank" rel="external">some component examples</a>. If you would give us some feedback, asks us question, or contribute to the project get in touch via the <a href="https://gitter.im/opentable/oc" target="_blank" rel="external">gitter chat</a> or via <a href="mailto:oc@opentable.com" target="_blank" rel="external">e-mail</a>. We would love to hear your thoughts about this project.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Many engineers work every day on opentable.com from our offices located in Europe, America, and Asia, pushing changes to production multiple times a day. Usually, this is very hard to achieve, in fact it took years for us to get to this point. &lt;a href=&quot;/blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/&quot;&gt;I described in a previous article&lt;/a&gt; how we dismantled our monolith in favour of a Microsites architecture. Since the publication of that blog post we have been working on something I believe to be quite unique, called &lt;strong&gt;OpenComponents&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Another-front-end-framework&quot;&gt;&lt;a href=&quot;#Another-front-end-framework&quot; class=&quot;headerlink&quot; title=&quot;Another front-end framework?&quot;&gt;&lt;/a&gt;Another front-end framework?&lt;/h3&gt;&lt;p&gt;OpenComponents is a system to facilitate code sharing, reduce dependencies, and easily approach new features and experiments from the back-end to the front-end. To achieve this, it is based on the concept of using services as interfaces - enabling pages to render partial content that is located, executed and deployed independently.&lt;/p&gt;
&lt;p&gt;OpenComponents is not &lt;em&gt;another SPA JS framework&lt;/em&gt;; it is a set of conventions, patterns and tools to develop and quickly deploy fragments of front-end. In this perspective, it plays nicely with any existing architecture and framework in terms of front-end and back-end. Its purpose is to &lt;strong&gt;serve as delivery mechanism for a more modularised end-result in the front-end&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;OC is been in production for more than a year at OpenTable and it is &lt;a href=&quot;https://github.com/opentable/oc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fully open-sourced&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;
    
    </summary>
    
    
      <category term="SOA" scheme="http://tech.opentable.co.uk/blog/categories/SOA/"/>
    
      <category term="Microsites" scheme="http://tech.opentable.co.uk/blog/categories/Microsites/"/>
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="OpenComponents" scheme="http://tech.opentable.co.uk/blog/categories/OpenComponents/"/>
    
      <category term="OC" scheme="http://tech.opentable.co.uk/blog/categories/OC/"/>
    
  </entry>
  
  <entry>
    <title>Testing React Components</title>
    <link href="http://tech.opentable.co.uk//blog/2016/01/07/react-testing/"/>
    <id>http://tech.opentable.co.uk//blog/2016/01/07/react-testing/</id>
    <published>2016-01-07T11:00:00.000Z</published>
    <updated>2016-10-24T10:26:28.768Z</updated>
    
    <content type="html"><![CDATA[<p>At OpenTable it’s becoming an increasingly popular trend to use <em><a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a></em>.<br>One of the reasons for this is the ability for it  to server-side render whilst still<br>giving us the client side flexibility that we all crave!</p>
<p>We all know to have stable, reliable software you need to have well written tests. Facebook knows this and<br>provides the handy <em><a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">Test Utilities</a></em> library to make<br>our lives easier.</p>
<p>Cool — I hear you all say! But what is the best approach to testing React components?</p>
<p>Well unfortunately this is something that is not very well documented and if not approached in<br>the correct way can lead to brittle tests.</p>
<p>Therefore I have written this blog post to discuss the different approaches we have available to us.</p>
<p>All code used in this post is avaliable on my <em><a href="https://github.com/chriscartlidge/React-Testing-Blog-Code" target="_blank" rel="external">GitHub</a></em>.</p>
<p>##The Basics</p>
<p>To make our lives a lot easier when writing test it’s best to use a couple of basic tools. Below is<br>the absolute minimum required to start testing React components.</p>
<ul>
<li><em><a href="https://mochajs.org/" target="_blank" rel="external">Mocha</a></em> - This is a testing framework that runs in the browser or Node.JS (others are available).</li>
<li><em><a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">ReactTestUtils</a></em> - This is the basic testing framework that Facebook provides to go testing with React.</li>
</ul>
<p>##The Scenario</p>
<p>We have a landing page broken down into two separate components:</p>
<ul>
<li>Container - The holding container for all sub-components.</li>
<li>Menu Bar - Contains the site navigation and is always displayed.</li>
</ul>
<p><img src="/images/posts/react-comp.png" alt="react-comp"></p>
<p>Each React component is self-contained and should be tested in isolation.</p>
<p>For the purpose of this exercise we will focus on the test for the container component and<br>making sure that the menu bar is displayed within it.</p>
<p>##Approach 1 (Full DOM):</p>
<p>I like to call this the “Full DOM” approach because you take a component and render it in its entirety<br>including all of its children. The React syntax are transformed and any assertion<br>you make will be against the rendered HTML elements.</p>
<p>Below is our test scenario written in this approach.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/addons'</span>;</div><div class="line">...</div><div class="line">import jsdom <span class="keyword">from</span> <span class="string">'jsdom'</span>;</div><div class="line"></div><div class="line">global.document = jsdom.jsdom(<span class="string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line">global.window = <span class="built_in">document</span>.parentWindow;</div><div class="line"></div><div class="line">describe(<span class="string">'Container'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  it(<span class="string">'Show the menu bar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> container = TestUtils.renderIntoDocument(<span class="xml"><span class="tag">&lt;<span class="name">Container</span> /&gt;</span>);</span></div><div class="line"></div><div class="line">    let result = TestUtils.scryRenderedDOMComponentsWithClass(container,</div><div class="line">      'menu-bar-container');</div><div class="line"></div><div class="line">    assert.lengthOf(result, 1);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>If you run the above test it passes but how does it work?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jsdom <span class="keyword">from</span> <span class="string">'jsdom'</span>;</div><div class="line"></div><div class="line">global.document = jsdom.jsdom(<span class="string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line">global.window = <span class="built_in">document</span>.parentWindow;</div></pre></td></tr></table></figure>
<p>This sets up our DOM which is a requirement of <em><a href="https://facebook.github.io/react/docs/test-utils.html#renderintodocument" target="_blank" rel="external">TestUtils.renderIntoDocument</a></em>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> container = TestUtils.renderIntoDocument(<span class="xml"><span class="tag">&lt;<span class="name">Container</span> /&gt;</span>);</span></div></pre></td></tr></table></figure>
<p><em><a href="https://facebook.github.io/react/docs/test-utils.html#renderintodocument" target="_blank" rel="external">TestUtils.renderIntoDocument</a></em> then takes the React syntax and renders it into the DOM as HTML.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> result = TestUtils.scryRenderedDOMComponentsWithClass(container, <span class="string">'menu-bar-container'</span>);</div></pre></td></tr></table></figure></p>
<p>We now query the DOM for a unique class that is contained within the menu-bar and get an array of<br>DOM elements back which we can assert against.</p>
<p>The example above is a common approach but is it necessarily the best way?</p>
<p>From my point of view no, as this approach makes our tests brittle. We are exposing and querying on the inner workings<br>of the menu-bar and if someone was to refactor it and remove/rename the “menu-bar-container” class then our test would fail.</p>
<p>##Approach 2 (Shallow Rendering):</p>
<p>With the release of React 0.13 Facebook provided the ability to “shallow render” a component.<br>This allows you to instantiate a component and get the result of its render function, a ReactElement, without a DOM.<br>It also only renders the component one level deep so you can keep your tests more focused.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; addons &#125; <span class="keyword">from</span> <span class="string">'react/addons'</span>;</div><div class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">'../../src/Container'</span>;</div><div class="line"><span class="keyword">import</span> MenuBar <span class="keyword">from</span> <span class="string">'../../src/MenuBar'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'Container'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> shallowRenderer = React.addons.TestUtils.createRenderer();</div><div class="line"></div><div class="line">  it(<span class="string">'Show the menu bar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    shallowRenderer.render(<span class="xml"><span class="tag">&lt;<span class="name">Container</span>/&gt;</span></span>);</div><div class="line">    <span class="keyword">let</span> result = shallowRenderer.getRenderOutput();</div><div class="line"></div><div class="line">    assert.deepEqual(result.props.children, [</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">MenuBar</span> /&gt;</span></span></div><div class="line">    ]);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Again like the previous example this passes but how does it work?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shallowRenderer = React.addons.TestUtils.createRenderer();</div></pre></td></tr></table></figure>
<p>We first create the <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em> which handles the rendering of the React components.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shallowRenderer.render(<span class="xml"><span class="tag">&lt;<span class="name">Container</span>/&gt;</span></span>);</div></pre></td></tr></table></figure>
<p>Then we pass in the component we have under test to the <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> result = shallowRenderer.getRenderOutput();</div><div class="line">assert.deepEqual(result.props.children, [<span class="xml"><span class="tag">&lt;<span class="name">MenuBar</span>/&gt;</span></span>]);</div></pre></td></tr></table></figure>
<p>And finally we get the output from the <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em> and<br>assert that the children contain the menu-bar component.</p>
<p>Is this approach any better than the previous? In my option yes and for the following reasons:</p>
<ul>
<li><p>We don’t rely on the inner workings of the menu-bar to know if it has been rendered and therefore the markup can be refactored without<br>any of the<br>tests being broken.</p>
</li>
<li><p>Less dependencies are being used as <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em> does not require<br>a DOM to render into.</p>
</li>
<li><p>It’s a lot easier to see what is being asserted as we are able to use JSX syntax in assertions.</p>
</li>
</ul>
<p>##Conclusion<br>So is shallow rendering the silver bullet for React testing? Probably not as it still lacking on key feature for me when dealing<br>with large components and that is the ability to easily query the ReactDOM (libraries like <em><a href="https://github.com/airbnb/enzyme" target="_blank" rel="external">enzyme</a></em><br>are working towards improving this). But it is still a lot better than rendering the component out into HTML and coupling your tests<br>to the inner components of others.</p>
<p>In this blog post we have just scratched the surface of testing with React and I hope it’s food for thought when writing your next set of<br>React tests.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At OpenTable it’s becoming an increasingly popular trend to use &lt;em&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;&lt;/em&gt;.&lt;br&gt;One of the reasons for this is the ability for it  to server-side render whilst still&lt;br&gt;giving us the client side flexibility that we all crave!&lt;/p&gt;
&lt;p&gt;We all know to have stable, reliable software you need to have well written tests. Facebook knows this and&lt;br&gt;provides the handy &lt;em&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/test-utils.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Test Utilities&lt;/a&gt;&lt;/em&gt; library to make&lt;br&gt;our lives easier.&lt;/p&gt;
&lt;p&gt;Cool — I hear you all say! But what is the best approach to testing React components?&lt;/p&gt;
&lt;p&gt;Well unfortunately this is something that is not very well documented and if not approached in&lt;br&gt;the correct way can lead to brittle tests.&lt;/p&gt;
&lt;p&gt;Therefore I have written this blog post to discuss the different approaches we have available to us.&lt;/p&gt;

    
    </summary>
    
    
      <category term="Testing" scheme="http://tech.opentable.co.uk/blog/categories/Testing/"/>
    
      <category term="JavaScript" scheme="http://tech.opentable.co.uk/blog/categories/JavaScript/"/>
    
      <category term="React" scheme="http://tech.opentable.co.uk/blog/categories/React/"/>
    
  </entry>
  
  <entry>
    <title>Puppet-Community</title>
    <link href="http://tech.opentable.co.uk//blog/2015/05/06/puppet-community/"/>
    <id>http://tech.opentable.co.uk//blog/2015/05/06/puppet-community/</id>
    <published>2015-05-06T09:00:00.000Z</published>
    <updated>2016-10-24T10:26:05.856Z</updated>
    
    <content type="html"><![CDATA[<p>Puppet is an important tool to us at OpenTable; we couldn’t operate as efficiently without it but Puppet is more than a tool or a vendor, it is a community of people trying to help<br>each other operate increasing complex and sophisticated infrastructures.</p>
<p>The Puppet community and the open source efforts that drive that community have always been important to us which is why we want to take a step further in our efforts and introduce<br>you to the “Puppet-community” project.</p>
<p>##What is Puppet-community<br>Puppet-community is a GitHub organisation of like-minded individuals from across the wider Puppet ecosystem and from a diverse set of companies. Its principle aims are to allow the community to synchronise its efforts and to provide a GitHub organisation and Puppet Forge namespace not affiliated with any company.</p>
<p>Its wider aims are to provide a place for module and tool authors to share their code and the burden of maintaining it.</p>
<p>I would like to say that this was our idea, as it’s an excellent one, but actually all credit goes to its founders: <a href="https://github.com/igalic" target="_blank" rel="external">Igor Galić</a>, <a href="https://github.com/daenney" target="_blank" rel="external">Daniele Sluijters</a> and <a href="https://github.com/nibalizer" target="_blank" rel="external">Spencer Krum</a></p>
<p>##Why communities matter<br>So why all the fuss about this? Why does it even matter where your code lives?</p>
<p>Well these are the some questions that I asked myself when I first heard about this project at PuppetConf 2014. The answer is that is really does matter and it’s a pattern that is<br>developing elsewhere (see: <a href="https://github.com/packer-community" target="_blank" rel="external">packer-community</a>, <a href="https://github.com/terraform-community-modules" target="_blank" rel="external">terraform-community-modules</a>,<br><a href="https://github.com/cloudfoundry-community" target="_blank" rel="external">cloudfoundry-community</a>) to deal with the problems you’ll face with a large amount of open source code.</p>
<p>Stepping back slightly, if you look at open source then there are three types: product-based (think open-core), corporate/individual sponsored,  and community-driven.</p>
<p>The first is common for businesses (like PuppetLabs) who’s product is a open source product. They make great efforts to build a community, fix bugs and accept changes. They make  their money through extras (add-ons and/or professional services). They control what they will/won’t accept and are driven by the need to build that community as well as support those big paying customers who pay the bills - it’s a tough balancing act.</p>
<p>The second is what you probably mean when you think about open source. It’s a individual or company that dumps some code they have been working on to GitHub and that’s it - they own it, they control it, it they don’t like your changes they don’t even have to give a reason. They can also choose to close or delete the project whenever they want or more likely they will just let it sit on GitHub and move onto the next thing.</p>
<p>The third is the community approach. Create a GitHub organisation, move your projects and add some new people in there with commit access. This is a different approach because it means<br>that you don’t own it any more, you don’t have that tight control over the codebase because there are other people with other opinions that you have to take into account. It also means<br>that on long weeks when you’re on-call or on holiday that there is someone else to pick up the slack and merge those pull requests for you. It has massive benefits if you can keep that<br>ego in check.</p>
<p>##Why we’re moving our modules there<br>So why is OpenTable moving its modules there? It is because we care about the community (particularly those using Puppet on Windows) and want to make sure there is good long term<br>support for the modules that we authored. OpenTable isn’t a company that authors Puppet modules, it is a company that seats diners in restaurants so from time to time we are going<br>to work on other things.</p>
<p>By being part of the community there will be other people who can help discuss and diagnose bugs, merge pull requests and generally help with any problems that arise when using<br>the modules we created.</p>
<p>Sometimes when writing a module it’s not about being the best, sometimes it’s just about being first - we got a bit lucky. What that means though is that we need to recognise that there<br>are plenty of people out there in the community that have better knowledge than us about a tool or application and might be better suited to guide the project forward - heck we might<br>even learn from them in the process.</p>
<p>So let’s lose our egos, loosen that grip and let those modules be free …</p>
<p>##What that means for you<br>Ok, so let’s get practical for a second. What’s happening here? What our support of Puppet-community means is that our code has moved into a new organisation<br>(<a href="https://github.com/puppet-community" target="_blank" rel="external">github.com/puppet-community</a>) and our modules have been re-released under the community namespace on the forge<br>(<a href="https://forge.puppetlabs.com/puppet" target="_blank" rel="external">forge.puppetlabs.com/puppet</a>). So if you are using our modules then you should go and have a look on the forge and update to the latest versions.<br>We will continue to provide lots of support to these modules but so will lots of others (including some PuppetLabs employees) so expect the quality of the modules to also start increasing.</p>
<p>If you have any thoughts or questions about this you can reach out to me personally on twitter: <a href="twitter.com/liamjbennett">@liamjbennett</a> or via email at: <a href="mailto:liamjbennett@gmail.com" target="_blank" rel="external">liamjbennett@gmail.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Puppet is an important tool to us at OpenTable; we couldn’t operate as efficiently without it but Puppet is more than a tool or a vendor, it is a community of people trying to help&lt;br&gt;each other operate increasing complex and sophisticated infrastructures.&lt;/p&gt;
&lt;p&gt;The Puppet community and the open source efforts that drive that community have always been important to us which is why we want to take a step further in our efforts and introduce&lt;br&gt;you to the “Puppet-community” project.&lt;/p&gt;
&lt;p&gt;##What is Puppet-community&lt;br&gt;Puppet-community is a GitHub organisation of like-minded individuals from across the wider Puppet ecosystem and from a diverse set of companies. Its principle aims are to allow the community to synchronise its efforts and to provide a GitHub organisation and Puppet Forge namespace not affiliated with any company.&lt;/p&gt;
&lt;p&gt;Its wider aims are to provide a place for module and tool authors to share their code and the burden of maintaining it.&lt;/p&gt;
&lt;p&gt;I would like to say that this was our idea, as it’s an excellent one, but actually all credit goes to its founders: &lt;a href=&quot;https://github.com/igalic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Igor Galić&lt;/a&gt;, &lt;a href=&quot;https://github.com/daenney&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Daniele Sluijters&lt;/a&gt; and &lt;a href=&quot;https://github.com/nibalizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spencer Krum&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="Puppet" scheme="http://tech.opentable.co.uk/blog/categories/Puppet/"/>
    
      <category term="Puppet-community" scheme="http://tech.opentable.co.uk/blog/categories/Puppet-community/"/>
    
  </entry>
  
  <entry>
    <title>The DNS ABC</title>
    <link href="http://tech.opentable.co.uk//blog/2015/03/05/the-dns-abc/"/>
    <id>http://tech.opentable.co.uk//blog/2015/03/05/the-dns-abc/</id>
    <published>2015-03-05T15:00:00.000Z</published>
    <updated>2016-10-24T10:27:03.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-DNS"><a href="#Introduction-to-DNS" class="headerlink" title="Introduction to DNS"></a>Introduction to DNS</h2><p>Before joining OpenTable I was looking for a software engineer job and I’ve done my fair share of interviews. A question that has popped out a lot, and when I say a lot I mean <em>always</em>, is:</p>
<p><em>Could you tell me what happens when I type an URL in a web browser on my computer and press enter?</em></p>
<p>Of course the possible answers could range from “MMMHHH, wellll, I’m not sure where to start…” to a whole book on computer networks.</p>
<p>After a number of attempts to answer briefly and correctly, I’ve concluded that mentioning <strong>DNS</strong> can make a reasonable start.</p>
<p>Let’s think about it. When we type the address of the resource we want to browse, we use the alphabet, right? With letters and names easily readable and retainable by a human being.</p>
<p>But a machine needs an <strong>IP address</strong> to recognize another machine connected to a network. An IP address is numerical, for example 192.168.0.1. Less readable, it seems.</p>
<p>And here is where DNS comes to play. DNS stands for <strong>Domain Name System</strong>, and that represents exactly what it is: a system that translates <strong>domain names</strong> (e.g <em>www.opentable.co.uk</em>), into IP addresses. I think of it as a phone book. It is queried with a domain name and, after a lookup, returns an IP.</p>
<p>How does the magic happen? Let’s look into it.</p>
<h2 id="The-ABC"><a href="#The-ABC" class="headerlink" title="The ABC"></a>The ABC</h2><h3 id="Some-definitions"><a href="#Some-definitions" class="headerlink" title="Some definitions"></a>Some definitions</h3><p>So we can define a domain name as a string composed by one or more parts, called <strong>labels</strong>, concatenated and delimited by dots with a <strong>hierarchical</strong> logic.</p>
<p>In the case of www.opentable.co.uk, for instance, we have four labels:</p>
<ul>
<li><p><em>uk</em> is the <strong>top-level</strong> domain. This should sound familiar. Famous top-level domains are also <em>.net</em>, <em>.org</em>, <em>.uk</em>, <em>.it</em>, <em>.gov</em>, etc.</p>
</li>
<li><p><em>co</em> is the <strong>second level</strong> domain, which in this case specifies the commercial nature of the company.</p>
</li>
<li><p>Hierarchy goes from right to left, so then we can say that <em>opentable</em> is a <strong>subdomain</strong> of <em>co</em>. And so on.</p>
</li>
<li><p>A name that can be associated to a specific machine connected to a network with an IP address is called <strong>hostname</strong>. Let’s say it’s the leftmost label in the domain name.</p>
</li>
</ul>
<h3 id="Questions-that-pop-out-at-this-point"><a href="#Questions-that-pop-out-at-this-point" class="headerlink" title="Questions that pop out at this point"></a>Questions that pop out at this point</h3><p>Q: So all the host names reachable via a specific domain have a specific IP address! There must be BILLIONS of them. How do we make sure everyone is unique?</p>
<p>A: There are entities that have the authority to assign and register names under one or more top-level domain, called <strong>registrars</strong>. The registered name then becomes part of a central database known as the <em>whois database</em>.</p>
<p>Q: Now, how do we retrieve this infamous IP address by just knowing a domain name? Who can <strong>resolve</strong> this request?</p>
<p>A: Well, the domain name is resolved into an IP address by querying <strong>authoritative name servers</strong>. These machines are the endpoints of a database that can map domain names to IPs. The authoritative name servers of the top level domain are also called <a href="https://www.iana.org/domains/root/servers" target="_blank" rel="external"><strong>root level servers</strong></a>.</p>
<p>Q: OK, but wait a second. How in the heavens does my machine know the address of the name server to query? I thought I just entered an address in the browser!</p>
<p>A: Every client machine has a default <strong>DNS resolver</strong>, which is responsible of initiating the sequence of queries that will ultimately lead to the resolution.<br>It is very important to note that the system’s DNS setting can be also overridden by the <a href="http://www.ispreview.co.uk/list.shtml" target="_blank" rel="external"><strong>Internet Service Provider</strong></a> (ISP) settings, so the DNS lookup process can be very OS-specific and ISP-specific. This would deserve a whole post apart.</p>
<h3 id="How-to-resolve-an-address-ideally"><a href="#How-to-resolve-an-address-ideally" class="headerlink" title="How to resolve an address (ideally)"></a>How to resolve an address (ideally)</h3><p>Resolving an address via DNS is also called <strong>lookup</strong>, and it is a recursive process. Now that we know the purpose of DNS, and the concepts involved in the process, we can dig a little deeper into its basic mechanism, which is roughly:</p>
<ol>
<li><p>The resolver has knowledge of the addresses of root name servers, from where the search can start.</p>
</li>
<li><p>The root name server will return a name server which is authoritative for the top-level domain.</p>
</li>
<li><p>This server will give the address of the name server authoritative for the second level domain.</p>
</li>
<li><p>If the hostname is resolved, an IP address is returned. Otherwise step 3) is repeated for all the labels of the domain name in sequence, until a result is reached.</p>
</li>
</ol>
<p>I made a diagram that shows that.</p>
<p><img src="http://federicomaffei.github.io/public/images/dnsbasic.jpg" class="center-image"></p>
<h3 id="Real-life-problems"><a href="#Real-life-problems" class="headerlink" title="Real life problems"></a>Real life problems</h3><p>The mechanism explained above is great, but if applied in a real life application, it will lead to a bottleneck. Every lookup would involve root servers and authoritative servers, which would be hit by gazillions of queries every day, putting a huge burden on the system since the start.</p>
<p>To solve this, of course a <a href="http://blog.catchpoint.com/2014/07/15/world-dns-cache-king/" target="_blank" rel="external"><strong>caching</strong></a> system comes to help. Yes, DNS allows and encourages caching. This way another class of DNS servers comes into play, the <strong>recursive name servers</strong>. They can perform recursive lookups and cache results, returning them when queried even if they don’t have the authority to generate the results themselves.</p>
<p>Caching recursive DNS server are usually managed by Internet Service Providers, and are able to resolve addresses without waiting for the “authorities”. This means that a query will rarely have to hit the root name servers, since there is a very high likelihood that the hostname/IP request is already cached by one of the delegated DNS servers that are called by recursion.</p>
<p>We could say that in reality a root server will be hit as a last resort to track down an authoritative server for a given domain.</p>
<p>The amount of time for which a lookup result is stored on a server is called <a href="http://en.wikipedia.org/wiki/Time_to_live" target="_blank" rel="external"><strong>time-to-live (TTL)</strong></a> and can vary with the configuration.</p>
<p>One side effect of the heavy caching that involves the DNS is that when a new domain is registered, or there is a change in any domain-related settings, there will be a time lag for the propagation of it to all the cached results.</p>
<p>It is noteworthy that cached DNS results from your browsing could be stored in your router, or somewhere within you browser memory as well. These IP addresses seem to be everywhere these days!</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I barely scratched the surface of the Domain Name System topic, and that alone took a good day of research and writing.</p>
<p>So I decided to avoid making this post too long, so that beginners that are going to find it will profit, and be encouraged to research on these key concepts. This will allow me to decide which part of DNS is worth more digging, and maybe write a sequel. Stay tuned!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction-to-DNS&quot;&gt;&lt;a href=&quot;#Introduction-to-DNS&quot; class=&quot;headerlink&quot; title=&quot;Introduction to DNS&quot;&gt;&lt;/a&gt;Introduction to DNS&lt;/h2&gt;&lt;p&gt;Before joining OpenTable I was looking for a software engineer job and I’ve done my fair share of interviews. A question that has popped out a lot, and when I say a lot I mean &lt;em&gt;always&lt;/em&gt;, is:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Could you tell me what happens when I type an URL in a web browser on my computer and press enter?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course the possible answers could range from “MMMHHH, wellll, I’m not sure where to start…” to a whole book on computer networks.&lt;/p&gt;
&lt;p&gt;After a number of attempts to answer briefly and correctly, I’ve concluded that mentioning &lt;strong&gt;DNS&lt;/strong&gt; can make a reasonable start.&lt;/p&gt;
&lt;p&gt;Let’s think about it. When we type the address of the resource we want to browse, we use the alphabet, right? With letters and names easily readable and retainable by a human being.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Engineering" scheme="http://tech.opentable.co.uk/blog/categories/Engineering/"/>
    
      <category term="Theory" scheme="http://tech.opentable.co.uk/blog/categories/Theory/"/>
    
      <category term="DNS" scheme="http://tech.opentable.co.uk/blog/categories/DNS/"/>
    
  </entry>
  
  <entry>
    <title>Hapi.js and SIGTERM</title>
    <link href="http://tech.opentable.co.uk//blog/2015/02/16/hapi-js-and-sigterm/"/>
    <id>http://tech.opentable.co.uk//blog/2015/02/16/hapi-js-and-sigterm/</id>
    <published>2015-02-16T10:32:42.000Z</published>
    <updated>2016-10-24T10:24:17.470Z</updated>
    
    <content type="html"><![CDATA[<p>When we first stood up our hapi.js APIs, we wrote init scripts to start/stop them. Stopping the server, was simply a case of sending SIGKILL (causing the app to immediately exit).</p>
<p>Whilst this is fine for most cases, if we want our apps to be good Linux citizens, then they should terminate gracefully. Hapi.js has the handy <code>server.stop(...)</code> command (see docs <a href="http://hapijs.com/api#serverstopoptions-callback" target="_blank" rel="external">here</a>) which will terminate the server gracefully. It will cause the server to respond to new connections with a 503 (server unavailable), and wait for existing connections to terminate (up to some specified timeout), before stopping the server and allowing the node.js process to exit. Perfect.</p>
<p>This makes our graceful shutdown code really simple:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'SIGTERM'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  server.stop(&#123; <span class="attr">timeout</span>: <span class="number">5</span> * <span class="number">1000</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    process.exit(<span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When we see a SIGTERM, call <code>server.stop()</code>, then once the server has stopped, call <code>process.exit(0)</code>. Easy peasy.</p>
<h3 id="Throw-a-spanner-in-the-works"><a href="#Throw-a-spanner-in-the-works" class="headerlink" title="Throw a spanner in the works"></a>Throw a spanner in the works</h3><p>Whilst <code>server.stop()</code> is really useful, it has the problem that it immediately prevents the server from responding to new requests. In our case, that isn’t particularly desirable. We use service-discovery, which means that the graceful termination of our app should run like this:</p>
<ul>
<li>SIGTERM</li>
<li>Unannounce from Service-Discovery</li>
<li><code>server.stop(...)</code></li>
<li><code>process.exit(0)</code></li>
</ul>
<p>Ideally we want the unannounce to happen before the server starts rejecting connections, in order to reduce the likelihood that clients will hit a server that is shutting down.</p>
<h3 id="Plugins-to-the-rescue"><a href="#Plugins-to-the-rescue" class="headerlink" title="Plugins to the rescue!"></a>Plugins to the rescue!</h3><p>Thanks to hapi.js’s awesome plugin interface (<a href="http://t.co/GDw44SETfS" target="_blank" rel="external">shameless self promotion</a>), we can do some magic to make the above possible.</p>
<p>I created a really simple plugin called <a href="https://www.npmjs.com/package/hapi-shutdown" target="_blank" rel="external">hapi-shutdown</a> which will handle SIGTERM and then run triggers before calling <code>server.stop(...)</code>.</p>
<p>The idea is that it allows us to run the ‘unannounce’ step, before <code>server.stop(...)</code> is called.</p>
<h3 id="How-to-use-hapi-shutdown"><a href="#How-to-use-hapi-shutdown" class="headerlink" title="How to use hapi-shutdown"></a>How to use hapi-shutdown</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">server.register([</div><div class="line">  &#123;</div><div class="line">    <span class="attr">plugin</span>: <span class="built_in">require</span>(<span class="string">'hapi-shutdown'</span>),</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="attr">serverSpindownTime</span>: <span class="number">5000</span> <span class="comment">// the timeout passed to server.stop(...)</span></div><div class="line">    &#125;</div><div class="line">  &#125;],</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    server.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">      server.plugins[<span class="string">'hapi-shutdown'</span>].register(&#123;</div><div class="line">        <span class="attr">taskname</span>: <span class="string">'do stuff'</span>,</div><div class="line">        <span class="attr">task</span>: <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123; </div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'doing stuff before server.stop is called'</span>); </div><div class="line">          done(); </div><div class="line">        &#125;,</div><div class="line">        <span class="attr">timeout</span>: <span class="number">2000</span> <span class="comment">// time to wait before forcibly returning</span></div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>The plugin exposes a <code>.register()</code> function which allows you to register your shutdown tasks. The tasks are named (to prevent multiple registrations), and each task must call the <code>done()</code> function. The <code>timeout</code> parameter is provided so that a task which never completes won’t block the shutdown of the server.</p>
<p> Neat, huh?</p>
<h3 id="Hooking-up-unannounce-using-hapi-shutdown"><a href="#Hooking-up-unannounce-using-hapi-shutdown" class="headerlink" title="Hooking up unannounce using hapi-shutdown"></a>Hooking up unannounce using hapi-shutdown</h3><p>We now have a place to register our ‘unannounce’ task. Our service-discovery code is wrapped in another plugin, which means we can use <code>server.dependency(...)</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// inside the plugin's register function</span></div><div class="line"></div><div class="line">server.dependency(<span class="string">'hapi-shutdown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">_, cb</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> err = server.plugins[<span class="string">'hapi-shutdown'</span>].register(&#123;</div><div class="line">    <span class="attr">taskname</span>: <span class="string">'discovery-unannounce'</span>,</div><div class="line">    <span class="attr">task</span>: <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</div><div class="line">      discovery.unannounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        done();</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">timeout</span>: <span class="number">10</span> * <span class="number">1000</span></div><div class="line">  &#125;);</div><div class="line"> </div><div class="line">  cb(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>server.dependency(...)</code> allows us to specify that this plugin relies on another plugin (or list of plugins). If the dependent plugin is not registered before the server starts, then an exception is thrown.</p>
<p>Handily, <code>server.dependency(...)</code> also takes a callback function, which is invoked after all the dependencies have been registered, which means that you don’t need to worry about ordering inside your <code>server.register(...)</code> code.</p>
<p>This allows our unannounce code to be decoupled from the actual business of shutting down the server.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When we first stood up our hapi.js APIs, we wrote init scripts to start/stop them. Stopping the server, was simply a case of sending SIGKILL (causing the app to immediately exit).&lt;/p&gt;
&lt;p&gt;Whilst this is fine for most cases, if we want our apps to be good Linux citizens, then they should terminate gracefully. Hapi.js has the handy &lt;code&gt;server.stop(...)&lt;/code&gt; command (see docs &lt;a href=&quot;http://hapijs.com/api#serverstopoptions-callback&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;) which will terminate the server gracefully. It will cause the server to respond to new connections with a 503 (server unavailable), and wait for existing connections to terminate (up to some specified timeout), before stopping the server and allowing the node.js process to exit. Perfect.&lt;/p&gt;
&lt;p&gt;This makes our graceful shutdown code really simple:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;process.on(&lt;span class=&quot;string&quot;&gt;&#39;SIGTERM&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  server.stop(&amp;#123; &lt;span class=&quot;attr&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    process.exit(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When we see a SIGTERM, call &lt;code&gt;server.stop()&lt;/code&gt;, then once the server has stopped, call &lt;code&gt;process.exit(0)&lt;/code&gt;. Easy peasy.&lt;/p&gt;

    
    </summary>
    
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="Hapi.js" scheme="http://tech.opentable.co.uk/blog/categories/Hapi-js/"/>
    
      <category term="SIGTERM" scheme="http://tech.opentable.co.uk/blog/categories/SIGTERM/"/>
    
  </entry>
  
  <entry>
    <title>Dismantling the monolith - Microsites at Opentable</title>
    <link href="http://tech.opentable.co.uk//blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/"/>
    <id>http://tech.opentable.co.uk//blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/</id>
    <published>2015-02-09T09:43:03.000Z</published>
    <updated>2016-10-24T10:18:01.451Z</updated>
    
    <content type="html"><![CDATA[<p>A couple of years ago we started to break-up the code-base behind our consumer site <a href="http://www.opentable.com" target="_blank" rel="external">opentable.com</a>, to smaller units of code, in order to improve our productivity. New teams were created with the goal of splitting up the logic that was powering the back-end and then bring to life new small services. Then, we started working on what we call <em>Microsites</em>.</p>
<h3 id="Microsites"><a href="#Microsites" class="headerlink" title="Microsites"></a>Microsites</h3><p>A microsite is a very small set of web-pages, or even a single one, that takes care of handling a very specific part of the system’s domain logic. Examples are the <em>Search Results</em> page or the <em>Restaurant’s Profile</em> page. Every microsite is an independently deployable unit of code, so it is easier to test, to deploy, and in consequence more resilient. Microsites are then all connected by a front-door service that handles the routing.</p>
<h3 id="Not-a-free-ride"><a href="#Not-a-free-ride" class="headerlink" title="Not a free ride"></a>Not a free ride</h3><p>When we deployed some microsites to production we immediately discovered a lot of pros:</p>
<ul>
<li>Bi-weekly deployments of the monolith became hundreds of deployments every week.</li>
<li>Not anymore a shared codebase for hundreds of engineers. Pull requests accepted, merged, and often deployed on the same day.</li>
<li>Teams experimenting and reiterating faster: product was happy.</li>
<li><em>Diversity</em> on tech stacks: teams were finally able to pick their own favourite web-stack, as soon as they were capable of deploying their code and taking care of it in terms of reliability and performance.</li>
<li>Robustness: when something was wrong with a microsite, everything else was fine.</li>
</ul>
<p>On the other hand, we soon realised that we introduced new problems on the system:</p>
<ul>
<li>Duplication: teams started duplicating a lot of code, specifically front-end components such as the header, the footer, etc.</li>
<li>Coordination: when we needed to change something on the header, for example, we were expecting to see the change live in different time frames, resulting in inconsistencies.</li>
<li>Performance: every microsite was hosting its own duplicated css, javascript libraries, and static resources; resulting as a big disadvantage for the end-user in terms of performance.</li>
</ul>
<h3 id="SRS-aka-Site-Resources-Service"><a href="#SRS-aka-Site-Resources-Service" class="headerlink" title="SRS - aka Site Resources Service"></a>SRS - aka Site Resources Service</h3><p>To solve some of these problems we created a REST api to serve html snippets, that soon we started to call <em>components</em>. Main characteristics of the system are:</p>
<ul>
<li>We have components for shared parts of the website such as the header, the footer, and the adverts. When a change has to go live, we apply the change, we deploy, and we see the change live everywhere.</li>
<li>Output is in HTML format, so the integration is possible if the microsite is either a .NET MVC site or a node.js app.</li>
<li>We have components for the core CSS and the JS common libraries, so that all the microsites use the same resources and the browser can cache them making the navigation smooth.</li>
<li>The service takes care of hosting all the static resources in a separate CDN, so microsites don’t have to host that resources.</li>
</ul>
<p>This is an example of a request to the <em>core</em> css component:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl http://srs-sc.otenv.com/v1/com-2014/resource-includes/css</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"href"</span>: <span class="string">"http://srs-sc.otenv.com/v1/com-2014/resource-includes/css"</span>,</div><div class="line">  <span class="string">"html"</span>: <span class="string">"&lt;link rel=\"stylesheet\" href=\"//na-srs.opentable.com/content/static-1.0.1388.0/css-new-min/app.css\" /&gt;&lt;!--[if lte IE 8]&gt;&lt;link rel=\"stylesheet\" href=\"//na-srs.opentable.com/content/static-1.0.1388.0/css-new-min/app_ie8.css\" /&gt; &lt;![endif]--&gt;"</span>,</div><div class="line">  <span class="string">"type"</span>:<span class="string">"css"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The downside of this approach is that there is a strict dependency with SRS for each microsite. On every request, a call to SRS has to be made, so <strong>we had to work hard to guarantee reliability and good performance</strong>.</p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>When we tried the microsite approach we “traded” some of our code problems with some new cultural problems. We became more agile and we were working in a new different way, with the downside of having the <strong>need to more effectively coordinate more people</strong>. The consequence is that the <strong>way we were approaching the code</strong> evolved over time.</p>
<p>One year later, with the front-end (almost completely) living on micro-sites, and with the help of SRS, we are experimenting more effective ways to be resilient and robust, with the specific goal to allow teams to create their own components and share them with other teams in order to be independent, and use them to easily approach to A/B experiments. </p>
<p>In the next post I’ll write about <a href="https://github.com/opentable/oc" target="_blank" rel="external">OpenComponents</a>, an experimental framework we just open-sourced that is trying to address some of this needs.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A couple of years ago we started to break-up the code-base behind our consumer site &lt;a href=&quot;http://www.opentable.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;opentable.com&lt;/a&gt;, to smaller units of code, in order to improve our productivity. New teams were created with the goal of splitting up the logic that was powering the back-end and then bring to life new small services. Then, we started working on what we call &lt;em&gt;Microsites&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Microsites&quot;&gt;&lt;a href=&quot;#Microsites&quot; class=&quot;headerlink&quot; title=&quot;Microsites&quot;&gt;&lt;/a&gt;Microsites&lt;/h3&gt;&lt;p&gt;A microsite is a very small set of web-pages, or even a single one, that takes care of handling a very specific part of the system’s domain logic. Examples are the &lt;em&gt;Search Results&lt;/em&gt; page or the &lt;em&gt;Restaurant’s Profile&lt;/em&gt; page. Every microsite is an independently deployable unit of code, so it is easier to test, to deploy, and in consequence more resilient. Microsites are then all connected by a front-door service that handles the routing.&lt;/p&gt;
&lt;h3 id=&quot;Not-a-free-ride&quot;&gt;&lt;a href=&quot;#Not-a-free-ride&quot; class=&quot;headerlink&quot; title=&quot;Not a free ride&quot;&gt;&lt;/a&gt;Not a free ride&lt;/h3&gt;&lt;p&gt;When we deployed some microsites to production we immediately discovered a lot of pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bi-weekly deployments of the monolith became hundreds of deployments every week.&lt;/li&gt;
&lt;li&gt;Not anymore a shared codebase for hundreds of engineers. Pull requests accepted, merged, and often deployed on the same day.&lt;/li&gt;
&lt;li&gt;Teams experimenting and reiterating faster: product was happy.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Diversity&lt;/em&gt; on tech stacks: teams were finally able to pick their own favourite web-stack, as soon as they were capable of deploying their code and taking care of it in terms of reliability and performance.&lt;/li&gt;
&lt;li&gt;Robustness: when something was wrong with a microsite, everything else was fine.&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
    
      <category term="SOA" scheme="http://tech.opentable.co.uk/blog/categories/SOA/"/>
    
      <category term="Microsites" scheme="http://tech.opentable.co.uk/blog/categories/Microsites/"/>
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="Monolith" scheme="http://tech.opentable.co.uk/blog/categories/Monolith/"/>
    
      <category term="OpenComponents" scheme="http://tech.opentable.co.uk/blog/categories/OpenComponents/"/>
    
  </entry>
  
  <entry>
    <title>A Beginner&#39;s guide to REST services</title>
    <link href="http://tech.opentable.co.uk//blog/2015/02/02/a-beginners-guide-to-rest-services/"/>
    <id>http://tech.opentable.co.uk//blog/2015/02/02/a-beginners-guide-to-rest-services/</id>
    <published>2015-02-02T11:53:25.000Z</published>
    <updated>2016-10-24T10:22:42.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-this-post"><a href="#Why-this-post" class="headerlink" title="Why this post?"></a>Why this post?</h2><p>As a junior, I always find it easier to just sit and write code than actually stop to think about the theoretical basis that lie under the applications I work on. <strong>REST</strong>  is one of those terms I heard a lot about, so I decided to try to sum up what it means and how it affects the choices we make everyday as software engineers.</p>
<h2 id="Introduction-to-REST"><a href="#Introduction-to-REST" class="headerlink" title="Introduction to REST"></a>Introduction to REST</h2><p>REST stands for Representational State Transfer, and it can be defined as an architectural style used to build Web Services that are lightweight, maintainable, and scalable. A service that is designed by REST principles can be called a <strong>RESTful service</strong>.</p>
<p>It has been described first in 2000 by Roy Fielding, in a <a href="http://www.ics.uci.edu/~fielding/pubs/webarch_icse2000.pdf" target="_blank" rel="external">dissertation</a> called “Architectural Styles and the Design of Network-based Software Architectures”. The basic idea was to describe the interactions between the components of a distributed system, putting constraints on them and emphasizing the importance of an uniform interface, that is abstracted from the single components.</p>
<p>REST is often applied to the design and development of web services, which is the scenario I’ll try to address in this post.</p>
<p>The purpose of a web service can be summed up as follows: it exposes <strong>resources</strong> to a <strong>client</strong> so that it can have access to them (examples of typical resources include pictures, video files, web pages and business data).</p>
<p>Common features of a service that is built in a REST style are:</p>
<ul>
<li>Representations</li>
<li>Messages</li>
<li>URIs</li>
<li>Uniform Interface</li>
<li>Statelessness</li>
<li>Links between resources</li>
<li>Caching</li>
</ul>
<h2 id="Representations-what-are-they"><a href="#Representations-what-are-they" class="headerlink" title="Representations - what are they?"></a>Representations - what are they?</h2><p>REST style does not put a constraint into the way resources are represented, as long as their format is understandable by the client.</p>
<p>Good examples of data formats in which a resource could be returned from a service are <a href="http://www.json.org/" target="_blank" rel="external"><strong>JSON</strong></a> (JavaScript Object Notation, which nowadays is the coolest one) and <a href="http://www.w3.org/XML/" target="_blank" rel="external"><strong>XML</strong></a> (Extensible Markup Language, used for more complex data structures). Say for instance a REST service has to expose the data related to a song, with its attributes. A way of doing it in JSON could be:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"ID"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"(You gotta) Fight for your right (To party)"</span>,</div><div class="line">    <span class="attr">"artist"</span>: <span class="string">"Beastie Boys"</span>,</div><div class="line">    <span class="attr">"album"</span>: <span class="string">"Licensed To Ill"</span>,</div><div class="line">    <span class="attr">"year"</span>: <span class="number">1986</span>,</div><div class="line">    <span class="attr">"genre"</span>: <span class="string">"Hip-Hop"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Easy, huh?</p>
<p>Anyway, a service can represent a resource in a number of ways at the same time, leaving the client to choose which one is better suited for its needs. The important thing is that there is agreement on what format to send/expect.</p>
<p>The format that the client needs will be part of the <strong>request</strong> sent by the client.</p>
<p>The resource will be eventually sent by the service as part of what we call a <strong>response</strong>.</p>
<p>It has to be kept in mind that a resource should be completely described by the representation, since this is the only information the client will have. It has to be exaustive, but without exposing classified or useless information about the entity at the same time.</p>
<h2 id="Messages-A-K-A-client-and-service-chatting"><a href="#Messages-A-K-A-client-and-service-chatting" class="headerlink" title="Messages A.K.A. client and service chatting"></a>Messages A.K.A. client and service chatting</h2><p>Q: So, how exactly do client and service exchange requests and responses?</p>
<p>A: They send messages.</p>
<p>In fact, to be more specific, the client will send an <strong>HTTP request</strong> to the service, specifying the following details:</p>
<ul>
<li>The <strong>method</strong> that is called on the resource. It can correspond to a <em>GET</em>, a <em>POST</em>, a <em>PUT</em>, a <em>DELETE</em>, an <em>OPTIONS</em> or a <em>HEAD</em> operation.</li>
<li>The <strong>URI</strong> of the request. It identifies what is the resource on which the client wants to use the method. More on that later. For now let’s say it is the only way the client knows how to call the needed resource.</li>
<li>The <strong>HTTP version</strong>, which is usually <a href="http://tools.ietf.org/html/rfc2616" target="_blank" rel="external"><em>HTTP/1.1</em></a>.</li>
<li>The <strong>request headers</strong>, which are the additional information passed, with the request, to the service. These fields are basically request modifiers, similar to the parameters sent to a programming language method, and they depend on the type of request sent. More on that later.</li>
<li>The <strong>request body</strong>: is the actual content of a message. In a RESTful service, it’s where the representation of resources sit. A body will not be present in a GET request, for instance, since it is a request to retrieve a resource rather than to create one, whereas a POST request will most likely have one.</li>
</ul>
<p>The request will then generate an <strong>HTTP response</strong> to the client, that will contain the following elements:</p>
<ul>
<li>The <strong>HTTP version</strong>, same as above.</li>
<li>The <strong>response code</strong>: which is a three-digit status code sent back to the client. Can be of the <strong>1xx</strong> format (informational), <strong>2xx</strong> (success), <strong>3xx</strong> (redirect), <strong>4xx</strong> (client error), <strong>5xx</strong> (server error).</li>
<li>The <strong>response header</strong>, which contains metadata and settings related to the message.</li>
<li>The <strong>response body</strong>: contains the representation (if the request was successful).</li>
</ul>
<h2 id="URIs-home-of-the-resources"><a href="#URIs-home-of-the-resources" class="headerlink" title="URIs, home of the resources"></a>URIs, home of the resources</h2><p>A requirement of REST is that each resource has to correspond to an <a href="http://en.wikipedia.org/wiki/Uniform_resource_identifier" target="_blank" rel="external">URI</a> address, which unsurprisingly stands for Uniform Resource Identifier. Having URIs associated to resources is key, because they are the addresses on which the client is allowed to perform the operations on the resources. It is important to stress that according to REST an URI should describe a resource, but never the operation performed on it.</p>
<p>The addresses are usually constructed hierarchically, to allow readability. A typical resource URL could be written as: <code>http://serviceName/resourceName/resourceID</code></p>
<p>Basic guidelines to build well-structured URIs are:</p>
<ul>
<li>Resources should be named with plural nouns, no verbs, using conventions throughout the whole service.</li>
<li>Query URIs <code>http://serviceName/resourceName?id=resourceID</code> should be used only when really necessary. They are not deprecated by REST style, but they are less readable than the normal URIs, and are ignored by search engines. On the upside, they allow the client to send parameters to the service, to refine the request for a specific subset of resources, or resources in a specific format.</li>
</ul>
<h2 id="Uniform-interface-various-operations"><a href="#Uniform-interface-various-operations" class="headerlink" title="Uniform interface, various operations"></a>Uniform interface, various operations</h2><p>Ok, so now that a client knows where a resource is reachable, how is it going to handle the resource? What are the operations that it can perform?</p>
<p>HTTP provides a set of methods that allow the client to perform standard operations on the service:</p>
<table style="margin-bottom:16px;"><br>    <tr><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Method</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Operation performed</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Quality</th><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">GET</td><br>        <td style="padding:5px 10px;">Read a resource</td><br>        <td style="padding:5px 10px;">Safe</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">POST</td><br>        <td style="padding:5px 10px;">Insert a new resource, or update an existing one</td><br>        <td style="padding:5px 10px;">Not idempotent</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">PUT</td><br>        <td style="padding:5px 10px;">Insert a new resource, or update an existing one</td><br>        <td style="padding:5px 10px;">Idempotent (see below)</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">DELETE</td><br>        <td style="padding:5px 10px;">Delete a resource</td><br>        <td style="padding:5px 10px;">Idempotent</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">OPTIONS</td><br>        <td style="padding:5px 10px;">List allowed operations on a resource</td><br>        <td style="padding:5px 10px;">Safe</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">HEAD</td><br>        <td style="padding:5px 10px;">Return only the response header, no body</td><br>        <td style="padding:5px 10px;">Safe</td><br>    </tr><br></table>

<p>The key difference between <em>POST</em> and <em>PUT</em> is that no matter how many times a <em>PUT</em> operation is performed, the result will be the same (this is what <em>idempotent</em> means), whereas with a <em>POST</em> operation a resource will be added or updated multiple times.</p>
<p>Another difference is that a client that sends a <em>PUT</em> request always need to know the exact URI to operate on, I.E. assigning a name or an ID to a resource. If the client is not able to do so, it has no choice but to use a POST request.</p>
<p>Finally, if the resource already exists, <em>POST</em> and <em>PUT</em> will update it in an identical fashion.</p>
<p>These operations, according to REST, should be available to the client as hyperlinks to the above described URIs, and that is how the client/service interface is constrained to be <em>uniform</em>.</p>
<h2 id="Statelessness-of-the-client-side"><a href="#Statelessness-of-the-client-side" class="headerlink" title="Statelessness of the client side"></a>Statelessness of the client side</h2><p>A RESTful service does not maintain the application state client-side. This only allows the client to perform requests that are resource specific, and does not allow the client to perform operations that assume prior knowledge of past requests. The client only knows what to do based on the ability to read the hypertext it receives, knowing its media type.</p>
<p>This leads me to mention an important constraint of REST, that was also <a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven" target="_blank" rel="external">enforced by Fielding</a> after publishing his dissertation: hyperlinks within hypertext are the only way for the client to make state transitions and perform operations on resources. This constraint is also known as <strong>HATEOAS</strong> (Hypermedia As The Engine Of Application State).</p>
<h2 id="Links-between-resources"><a href="#Links-between-resources" class="headerlink" title="Links between resources"></a>Links between resources</h2><p>In the case of a resource that contains a list of resources, REST suggests to include links to the single resources on the representation, to keep it compact and avoid redundant data.</p>
<h2 id="Caching-to-optimize-time-and-efficiency"><a href="#Caching-to-optimize-time-and-efficiency" class="headerlink" title="Caching to optimize time and efficiency"></a>Caching to optimize time and efficiency</h2><p>Allows to store responses and return them if the same request is performed again. It has to be handled carefully to avoid returning stale results. The headers that allow us to perform controls over caching are:</p>
<table style="margin-bottom:16px;"><br>    <tr><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Header</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Application</th><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Date</td><br>        <td style="padding:5px 10px;">Finding out when this representation was generated</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Last Modified</td><br>        <td style="padding:5px 10px;">Date and time when the server modified the representation</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Cache-Control</td><br>        <td style="padding:5px 10px;">HTTP 1.1 header used to control caching, can contain directives</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Expires</td><br>        <td style="padding:5px 10px;">Expiration date (supports HTTP 1.0)</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Age</td><br>        <td style="padding:5px 10px;">Duration since the resource was fetched from server</td><br>    </tr><br></table>

<p>Cache-Control values can be tweaked to control if a cached result is still valid or stale. For example, the <em>max-age</em> value indicates for how many seconds from the moment expressed by the Date header a cached result will be valid.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>REST is a language-agnostic style that abstracts over components and allows to build scalable, reusable and relatively lightweight web services. Thinking about it, it seems that REST is very close to an accurate description of the characteristics that made the World Wide Web so popular.</p>
<p>That of course is encouraging developers from all over the world to comply to these very basic ideas, owned by no one but at the same time used by everyone. Fascinating!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-this-post&quot;&gt;&lt;a href=&quot;#Why-this-post&quot; class=&quot;headerlink&quot; title=&quot;Why this post?&quot;&gt;&lt;/a&gt;Why this post?&lt;/h2&gt;&lt;p&gt;As a junior, I always find it easier to just sit and write code than actually stop to think about the theoretical basis that lie under the applications I work on. &lt;strong&gt;REST&lt;/strong&gt;  is one of those terms I heard a lot about, so I decided to try to sum up what it means and how it affects the choices we make everyday as software engineers.&lt;/p&gt;
&lt;h2 id=&quot;Introduction-to-REST&quot;&gt;&lt;a href=&quot;#Introduction-to-REST&quot; class=&quot;headerlink&quot; title=&quot;Introduction to REST&quot;&gt;&lt;/a&gt;Introduction to REST&lt;/h2&gt;&lt;p&gt;REST stands for Representational State Transfer, and it can be defined as an architectural style used to build Web Services that are lightweight, maintainable, and scalable. A service that is designed by REST principles can be called a &lt;strong&gt;RESTful service&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It has been described first in 2000 by Roy Fielding, in a &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/webarch_icse2000.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dissertation&lt;/a&gt; called “Architectural Styles and the Design of Network-based Software Architectures”. The basic idea was to describe the interactions between the components of a distributed system, putting constraints on them and emphasizing the importance of an uniform interface, that is abstracted from the single components.&lt;/p&gt;
&lt;p&gt;REST is often applied to the design and development of web services, which is the scenario I’ll try to address in this post.&lt;/p&gt;

    
    </summary>
    
    
      <category term="Architecture" scheme="http://tech.opentable.co.uk/blog/categories/Architecture/"/>
    
      <category term="Engineering" scheme="http://tech.opentable.co.uk/blog/categories/Engineering/"/>
    
      <category term="REST" scheme="http://tech.opentable.co.uk/blog/categories/REST/"/>
    
      <category term="API" scheme="http://tech.opentable.co.uk/blog/categories/API/"/>
    
      <category term="Theory" scheme="http://tech.opentable.co.uk/blog/categories/Theory/"/>
    
  </entry>
  
  <entry>
    <title>On Strongly Typed Logging</title>
    <link href="http://tech.opentable.co.uk//blog/2015/01/23/on-strongly-typed-logging/"/>
    <id>http://tech.opentable.co.uk//blog/2015/01/23/on-strongly-typed-logging/</id>
    <published>2015-01-23T13:13:13.000Z</published>
    <updated>2016-10-24T10:25:29.166Z</updated>
    
    <content type="html"><![CDATA[<p>Logging is a crucial element of monitoring highly available systems. It allows not only to find out about errors but also quickly identify their cause. Logs are often used to generate metrics that help business and engineering make informative decisions on future development directions. </p>
<p>At OpenTable we have a central logging infrastructure, that means all logs are stored in the same shared database (ElasticSearch for us). And everybody can access any logs they want without having very specialized knowledge (thanks Kibana!).</p>
<p>ElasticSearch, though living in a NoSQL world, is not actually a schema-free database. Sure, you do not need to provide schema to it but instead ES will infer schema for you from documents you send to it. This is very similar to type inference you can find in many programming languages. You do not need to specify type of field, but if you later on try to assign inappropriate value to it you will get an exception.</p>
<p>This trait of our database goes all the way to the root of our logging system design. Let me explain why I say that we have ‘strongly typed logs’.</p>
<h2 id="In-The-Beginning-There-Was-String"><a href="#In-The-Beginning-There-Was-String" class="headerlink" title="In The Beginning There Was String"></a>In The Beginning There Was String</h2><p>Before centralization we just logged a single message along with its importance. In code it looked something like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.ERROR(“Kaboom!”)</div></pre></td></tr></table></figure></p>
<p>which resulted in logline on disk having timestamp, severity and message.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;2014-10-10T07:33:04Z [ERROR] Kaboom!&#125;</div></pre></td></tr></table></figure></p>
<p>That worked pretty well. As time passed we often started making log messages more generic to hold relevant data:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.INFO(string.Format(“Received &#123;0&#125; from &#123;1&#125;. Status: &#123;2&#125;. Took &#123;3&#125;”, httpMethod, sourceIp, statusCode, durationms));</div></pre></td></tr></table></figure></p>
<p>When we decided to centralize logs we moved the same logs from local disk to a central database. Suddenly things that used to live on single server in a file called ‘application.log’ become part of one huge lump of data. Instead of easing access to logs they were really hard to filter, without even speaking about aggregation, or any simple form of operations to find the source of the problem. ElasticSearch is really good at free text searching, but frankly speaking FTS is never as precise as a good filter.</p>
<h2 id="Then-There-Was-Dictionary-Of-Strings"><a href="#Then-There-Was-Dictionary-Of-Strings" class="headerlink" title="Then There Was Dictionary Of Strings"></a>Then There Was Dictionary Of Strings</h2><p>Wherever there is problem there is also a solution. So we changed the way our logging works. We created a custom logger and started sending logs more like documents than single string.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">customLogger.send(‘info’, new Dictionary&lt;string, string&gt; &#123;</div><div class="line">&#123;‘method’, httpMethod.ToString()&#125;,</div><div class="line">&#123;‘sourceIp’, sourceIp.ToString()&#125;,</div><div class="line">&#123;‘statusCode’, statusCode.ToString()&#125;,</div><div class="line">&#123;‘duration’, durationms.ToString()&#125;,</div><div class="line">&#123;‘requestId’, requestId.ToString()&#125;,</div><div class="line">&#123;‘service’, ‘myservice’&#125;</div><div class="line">&#123;‘message’, string.Format(“Received &#123;0&#125; from &#123;1&#125;. Status: &#123;2&#125;. Took &#123;3&#125;”, httpMethod, sourceIp, statusCode, durationms)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>That helped a lot.</strong></p>
<p>You might wonder why we serialized everything to string? The answer is ElasticSearch mapping as I described above. Mapping, once it is inferred, cannot be changed. So from time to time we used to have conflicts (e.g. one application logging requestId as number, other as guid). Those conflicts were costly - logs were lost - so we simply applied the simplest solution available and serialized everything.</p>
<p>Now filtering was working fine. We were even able to group requests based on a single field and count them. You cannot imagine how useful it is to simply count the different status codes returned by a service. Also you may have noticed we introduced some extra fields like ‘service’ which helped us group logs coming from a single application. We did the same with hostname etc.</p>
<p>With this easy success our appetite has grown and we wanted to log more. And being lazy programmers we found a way to do it quickly so our logs often included just relevant objects.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">customLogger.log(‘info’, request)</div><div class="line">customLogger.log(‘error’, exception)</div></pre></td></tr></table></figure></p>
<p>Our custom logging library did all the serialization for us. This worked really well. Now we were actually logging whole things that mattered without having to worry about serialization at all. What’s even better, whenever the object in question changed (e.g. a new field was added to request), it was automagically logged.</p>
<p>However one thing was still missing. We really wanted to see performance of our application in real time or do range queries (e.g. “show me all requests that have 5xx status code”). We also were aware that both ES and Kibana can deliver it but our logging is not yet good enough.</p>
<h2 id="Strongly-Typed-Logs"><a href="#Strongly-Typed-Logs" class="headerlink" title="Strongly Typed Logs"></a>Strongly Typed Logs</h2><p>So we looked at our logging and infrastructure and at what needs to be done to allow different types of fields to live in ElasticSearch. And you can imagine that it was a pretty simple fix; we just started using types. Each log format was assigned its own type. This type was then used by ElasticSearch to put different logs into separate buckets with separate mapping. The type is equivalent in meaning to classes in OO programming. If we take this comparison further then each log entry would be an object in OO programming. ElasticSearch supports searches across multiple types, which is very convenient when you don’t know what you are looking for. On the other hand, when you know, you can limit your query to single type and take advantage of fields types.</p>
<p>It was a big application change as we needed to completely change our transport mechanism to LogStash. We started with Gelf and switched to Redis, which allowed us to better control format of our logs. </p>
<p>We also agreed on a first standard. The standard defined that type will consist of three parts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;serviceName&gt;-&lt;logName&gt;-&lt;version&gt;</div></pre></td></tr></table></figure></p>
<p>This ensures that each team can use any logs they want to (thus serviceName). Each log will have its own format (thus logName). But they can also change in the future (thus version). One little word of caution, ES doesn’t like dots in type name, so don’t use them.</p>
<p>So our logs look now like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">customLogger.log(new RequestLog &#123;</div><div class="line">Request = request,</div><div class="line">Headers = headers,</div><div class="line">Status = status&#125;)</div></pre></td></tr></table></figure></p>
<p>RequestLog is responsible for providing valid type to the logging library.</p>
<p>With sending serialized objects as logs and assigning each class unique type our logs have become strongly typed.</p>
<p>We are already couple steps further down the path of improving our logs. We standardized some common fields and logtypes. That, however, is a completely different tale. ​</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Logging is a crucial element of monitoring highly available systems. It allows not only to find out about errors but also quickly identify their cause. Logs are often used to generate metrics that help business and engineering make informative decisions on future development directions. &lt;/p&gt;
&lt;p&gt;At OpenTable we have a central logging infrastructure, that means all logs are stored in the same shared database (ElasticSearch for us). And everybody can access any logs they want without having very specialized knowledge (thanks Kibana!).&lt;/p&gt;
&lt;p&gt;ElasticSearch, though living in a NoSQL world, is not actually a schema-free database. Sure, you do not need to provide schema to it but instead ES will infer schema for you from documents you send to it. This is very similar to type inference you can find in many programming languages. You do not need to specify type of field, but if you later on try to assign inappropriate value to it you will get an exception.&lt;/p&gt;
&lt;p&gt;This trait of our database goes all the way to the root of our logging system design. Let me explain why I say that we have ‘strongly typed logs’.&lt;/p&gt;
&lt;h2 id=&quot;In-The-Beginning-There-Was-String&quot;&gt;&lt;a href=&quot;#In-The-Beginning-There-Was-String&quot; class=&quot;headerlink&quot; title=&quot;In The Beginning There Was String&quot;&gt;&lt;/a&gt;In The Beginning There Was String&lt;/h2&gt;&lt;p&gt;Before centralization we just logged a single message along with its importance. In code it looked something like:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;logger.ERROR(“Kaboom!”)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Architecture" scheme="http://tech.opentable.co.uk/blog/categories/Architecture/"/>
    
      <category term="ElasticSearch" scheme="http://tech.opentable.co.uk/blog/categories/ElasticSearch/"/>
    
      <category term="Logs" scheme="http://tech.opentable.co.uk/blog/categories/Logs/"/>
    
      <category term="Kibana" scheme="http://tech.opentable.co.uk/blog/categories/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>Building a living styleguide at OpenTable</title>
    <link href="http://tech.opentable.co.uk//blog/2015/01/19/building-a-living-styleguide-at-opentable/"/>
    <id>http://tech.opentable.co.uk//blog/2015/01/19/building-a-living-styleguide-at-opentable/</id>
    <published>2015-01-19T17:00:00.000Z</published>
    <updated>2016-10-24T10:23:10.745Z</updated>
    
    <content type="html"><![CDATA[<p>If you’re reading this you’ve probably built yourself a website.  A site - large or small - that’s thrown together or crafted over many months.  And if you have, you’ve probably kept all your CSS class names in your head, or at least been able to go straight to the relevant stylesheets to retrieve them.</p>
<p>Well OpenTable is unsurprisingly built by many engineering teams across multiple continents, and was completely redesigned last year.  And as soon as you have more than a handful of people working on your front-end you will quickly find a well-intentioned developer causing one or both of these problems:</p>
<ul>
<li>Well-intentioned developer adds a new submission form but, like the design Philistine he is, his buttons are <span style="font-family:verdana;font-size:18px;color:#E40000;">18px Verdana #E40000</span>, not the correct <span style="font-family:arial;font-size:16px;color:#DA3743;">16px Arial #DA3743</span></li>
<li>Your good old developer knows which font size and colour it should be, but bungs a duplicate class into a random stylesheet (or worse still, inline)</li>
</ul>
<p>Despite these risks, a single front-end dev (or a team of them) cannot check every new piece of code or they will quickly become a bottleneck.</p>
<h3 id="You-need-some-guidelines"><a href="#You-need-some-guidelines" class="headerlink" title="You need some guidelines"></a>You need some guidelines</h3><p>Offline designers regularly create ‘brand guidelines’ or ‘design standards’ to document the precise way their brand or product should be recreated when outside of their control.  Online, such guidelines are similarly invaluable for maintaining brand and code consistency with multiple engineers and designers, but it is blindingly obvious that a printed or ‘static’ set of guidelines is completely unsuitable for a constantly changing website.</p>
<p>Step forward a ‘living’ styleguide.</p>
<p>A living styleguide gives a visual representation of a site’s UI elements using <strong>the exact same code</strong> as on the website, in most cases via the live CSS.  A living styleguide may also provide reusable CSS and HTML code examples and they are not just for engineers new to the code; I frequently use ours at OpenTable and I wrote the stylesheets in the first place (I can’t be expected to remember everything).</p>
<p>Providing reusable code improves collaboration, consistency and standards, and reduces design and development time - but like most documentation it is essential your guide is always up-to-date and trustworthy.  So if a living styleguide is (theoretically) always up-to-date, how did we build ours?</p>
<h2 id="How-we-built-our-styleguide"><a href="#How-we-built-our-styleguide" class="headerlink" title="How we built our styleguide"></a>How we built our styleguide</h2><p>Living styleguides are not new (although they were <a href="http://sideproject.io/an-exhaustive-look-at-the-year-in-web-design/#styleguides" target="_blank" rel="external">one of the trends of 2014</a>) and as such many frameworks have been built over the years.  We chose to use <a href="http://kaleistyleguide.com/" target="_blank" rel="external">Kalei</a> by <a href="https://github.com/thomasdavis" target="_blank" rel="external">Thomas Davis</a> - I forget the exact reasons why but it was probably the easiest at the time to set up and customise.</p>
<p>Generating a Kalei styleguide is as simple as adding comments to your stylesheet; Kalei uses a variety of frameworks, including <a href="http://backbonejs.org/" target="_blank" rel="external">Backbone.js</a>, <a href="http://www.glazman.org/JSCSSP/" target="_blank" rel="external">JSCSSP</a> and <a href="https://github.com/chjj/marked" target="_blank" rel="external">Marked</a> to convert these comments into HTML mark-up, generate a list of your individual stylesheets as navigation and present these as a single page web app.</p>
<p>For example in your <code>buttons.css</code> file it is as simple as adding the following comments:</p>
<pre><code>/*!
# Primary buttons
Primary buttons are only used when there is an exceedingly distinct and clear call-to-action.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;#&quot; class=&quot;button&quot;&gt;Button&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#&quot; class=&quot;button secondary&quot;&gt;Button secondary&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#&quot; class=&quot;button success&quot;&gt;Button success&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#&quot; class=&quot;button alert&quot;&gt;Button alert&lt;/a&gt;</div></pre></td></tr></table></figure>

*/
</code></pre><p>Which, by using the CSS in the file itself, Kalei would visually render like so:</p>
<p><img src="/images/posts/styleguide-buttons-screenshot.png" alt="styleguide-buttons-screenshot"></p>
<h3 id="Customising-Kalei"><a href="#Customising-Kalei" class="headerlink" title="Customising Kalei"></a>Customising Kalei</h3><p>Kalei works well out-of-the-box but we had to make a few customisations.  These were mostly cosmetic changes, but a fundamental changes was to <strong>add support for Sass</strong>.  For this we wrote a Grunt task imaginatively called <code>grunt styleguide</code> in which we combined <em>Clean</em>, <em>Copy</em>, <em>Scss</em> and <em>Replace</em> tasks.  Unsatisfactorily it took a little while to set up and involved a number of steps, but below is simplification of the process.</p>
<ol>
<li>Clean all CSS files from the styleguide, excluding Kalei specific stylesheets</li>
<li>Copy our partial scss files into a temporary folder and rename them to remove the underscore (partial scss files begin with an underscore are are <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#partials" target="_blank" rel="external">not compiled by default</a>)</li>
<li>Compile the scss files into CSS in the styleguide directory</li>
<li>Copy across dependent fonts and images, using <em>Replace</em> to update the relative paths</li>
<li>Delete the temporary directory</li>
</ol>
<p>This task is run as a deployment step and can be run locally when developing the guide.</p>
<p>Other that a few small UI tweaks we made one significant changes to the look and feel.  By default the navigation lists stylesheets using their full file name, e.g. <strong>breadcrumbs.css</strong> and <strong>buttons.css</strong>.  Using a regex function in the <code>menu.js</code> file and <code>text-transform: capitalize</code> in the Kalei stylesheet we modify the navigation to display the more attractive headings <strong>Breadcrumbs</strong> and <strong>Buttons</strong>.</p>
<p>View our styleguide at <a href="http://www.opentable.com/styleguide" target="_blank">opentable.com/styleguide</a>.</p>
<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>Our living styleguide is intended to be an organic resource that we will grow and refine into an integral part of our software development.  We have many ideas for how we want to develop the guide - at the very least it is currently incomplete insomuch as we have not documented every one of our stylesheets.</p>
<p>There is also a fundamental weakness to this type of styleguide, which is duplication of code.  Whilst we use the exact same CSS as our live site, we are copying and pasting mark-up into these files and this content can go out of date without deliberate upkeep.  At OpenTable we have a <em>site resource service</em> which serves HTML snippets to different internal microsites so one option could be to use this service to integrate these snippets into the styleguide.  We may also investigate a solution using <a href="http://webcomponents.org/" target="_blank" rel="external">web components</a> as cross-browser support is not a concern.</p>
<p>We are also interested to see whether it would be useful to run UI tests against the styleguide. We have used <a href="http://pdiff.sourceforge.net/" target="_blank" rel="external">pDiff</a> in the past for visual regression on specific microsites, but the styleguide could be an opportunity to catch accidental, global UI changes.  We are going to look at running <a href="https://garris.github.io/BackstopJS/" target="_blank" rel="external">BackstopJS</a> against each section of the guide to see if this increases its usefulness.</p>
<p>Finally, as one of the developers who created the styleguide I want it to be widely adopted across OpenTable. I want designers and engineers to contribute to the code and use it for their day-to-day designing and developing, and I want product owners and marketing folks to use it when creating promotional material and A/B tests.  My ultimate goal is for it to be an integral tool enabling everyone to work faster, avoid duplication and maintain a consistent brand identity.</p>
<h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul>
<li>View an online directory <a href="http://styleguides.io/" target="_blank" rel="external">of styleguide articles and examples</a><!-- - Join us - [apply for our senior front-end engineer role at OpenTable, London.](https://hire.jobvite.com/Jobvite/Job.aspx?b=nlsWXpwA&j=oXeiYfwb) -->
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’re reading this you’ve probably built yourself a website.  A site - large or small - that’s thrown together or crafted over many months.  And if you have, you’ve probably kept all your CSS class names in your head, or at least been able to go straight to the relevant stylesheets to retrieve them.&lt;/p&gt;
&lt;p&gt;Well OpenTable is unsurprisingly built by many engineering teams across multiple continents, and was completely redesigned last year.  And as soon as you have more than a handful of people working on your front-end you will quickly find a well-intentioned developer causing one or both of these problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Well-intentioned developer adds a new submission form but, like the design Philistine he is, his buttons are &lt;span style=&quot;font-family:verdana;font-size:18px;color:#E40000;&quot;&gt;18px Verdana #E40000&lt;/span&gt;, not the correct &lt;span style=&quot;font-family:arial;font-size:16px;color:#DA3743;&quot;&gt;16px Arial #DA3743&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Your good old developer knows which font size and colour it should be, but bungs a duplicate class into a random stylesheet (or worse still, inline)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Despite these risks, a single front-end dev (or a team of them) cannot check every new piece of code or they will quickly become a bottleneck.&lt;/p&gt;
&lt;h3 id=&quot;You-need-some-guidelines&quot;&gt;&lt;a href=&quot;#You-need-some-guidelines&quot; class=&quot;headerlink&quot; title=&quot;You need some guidelines&quot;&gt;&lt;/a&gt;You need some guidelines&lt;/h3&gt;&lt;p&gt;Offline designers regularly create ‘brand guidelines’ or ‘design standards’ to document the precise way their brand or product should be recreated when outside of their control.  Online, such guidelines are similarly invaluable for maintaining brand and code consistency with multiple engineers and designers, but it is blindingly obvious that a printed or ‘static’ set of guidelines is completely unsuitable for a constantly changing website.&lt;/p&gt;
    
    </summary>
    
    
      <category term="UI" scheme="http://tech.opentable.co.uk/blog/categories/UI/"/>
    
      <category term="Design" scheme="http://tech.opentable.co.uk/blog/categories/Design/"/>
    
      <category term="OpenTable" scheme="http://tech.opentable.co.uk/blog/categories/OpenTable/"/>
    
      <category term="CSS" scheme="http://tech.opentable.co.uk/blog/categories/CSS/"/>
    
      <category term="Styleguide" scheme="http://tech.opentable.co.uk/blog/categories/Styleguide/"/>
    
  </entry>
  
  <entry>
    <title>Explaining Flux architecture with macgyver.js</title>
    <link href="http://tech.opentable.co.uk//blog/2015/01/01/explaining-flux-architecture-with-macgyver-dot-js/"/>
    <id>http://tech.opentable.co.uk//blog/2015/01/01/explaining-flux-architecture-with-macgyver-dot-js/</id>
    <published>2015-01-01T15:33:46.000Z</published>
    <updated>2016-10-24T10:23:48.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Flux"><a href="#What-is-Flux" class="headerlink" title="What is Flux?"></a>What is Flux?</h2><p><a href="https://github.com/facebook/flux" target="_blank" rel="external">Flux</a> is an application architectural pattern developed by Facebook. It was developed to solve some of the complexities of the MVC pattern when used at scale by favouring a uni-directional approach. It is a pattern and not a technology or framework.</p>
<p><img src="/images/posts/mvc-scale.png" alt="MVC scale issue"></p>
<p>When applications that use the model-view-controller (MVC) pattern at any scale it becomes difficult to maintain consistent data across multiple views. In particular the case whereby flow between models and views is not uni-directional and may require increasing logic to maintain parity between views when model data is updated. Facebook hit this issue several times and in particular with their unseen count (an incremented value of unseen messages which is updated by several UI chat components). It wasn’t until they realised that the MVC pattern accomodated the complexity that they stepped back from the problem and addressed the architecture.</p>
<p>Flux is intentionally unidirectional.</p>
<p><img src="/images/posts/flux.png" alt="flux"></p>
<p>Key to this architecture is the dispatcher. The dispatcher forms the gatekeeper that all actions must go through. When a view, or views, wish to do something they fire an action which the dispatcher correctly routes via registered callbacks made by the stores. </p>
<p>Stores are responsible for the data and respond to callbacks from the dispatcher. When data is changed they emit change events that views listen to to notify them that data has changed. The view can then respond accordingly (for example to update/rebind).</p>
<p>This will become more obvious when we go through the macgyver.js example.</p>
<h2 id="What-is-macgyver-js"><a href="#What-is-macgyver-js" class="headerlink" title="What is macgyver.js?"></a>What is macgyver.js?</h2><p><a href="https://github.com/stevejhiggs/macgyver" target="_blank" rel="external">Macgyver</a> is a project fork of <a href="http://mullet.io/" target="_blank" rel="external">mullet.io</a> by <a href="https://github.com/stevejhiggs" target="_blank" rel="external">Steve Higgs</a>. Mullet is an aggregate stack to get started using Node.js with Facebook’s <a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a> framework on the client and Walmart’s <a href="http://walmartlabs.github.io/hapi/" target="_blank" rel="external">hapi.js</a> on the server. </p>
<p>Steve initially swapped out Grunt for Gulp, updated hapi and React and fixed some issues with the React dev tools. I then added another example to incorporate the Flux architecture, which you can see <a href="https://github.com/stevejhiggs/macgyver/tree/master/reactPlusFlux" target="_blank" rel="external">here</a>. As React was also developed by Facebook you can begin to see how flux compliments its design and component based model.</p>
<h2 id="The-macgyver-js-Flux-example"><a href="#The-macgyver-js-Flux-example" class="headerlink" title="The macgyver.js Flux example"></a>The macgyver.js Flux example</h2><p>The demo is a very simple quiz. In true Macgyver style he is faced with abnormally unrealistic situations armed with impossibly useless “every-day” items to escape the situation. If you select the correct tool, you proceed to the next situation.</p>
<img src="/images/posts/structure.png" class="left" width="200">
<p>Let’s start by going through the uni-directional flow above and at the same time look at the code and its structure.</p>
<p>When the game is first loaded the view fires an action to get the next situation. This is then fired off to the dispatcher, as are all actions.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">receiveSituations: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	AppDispatcher.handleViewAction(&#123;</div><div class="line">   		<span class="attr">actionType</span>: MacgyverConstants.RECEIVE_SITUATIONS_DATA,</div><div class="line">     		<span class="attr">data</span>: data</div><div class="line">   	&#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>The store registers to listen for events from the dispatcher with a registered callback. It has the job of loading the situation data and emitting an event when this data is changed. In this case the SituationStore.js has the job of setting the current situation for the view to render.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">AppDispatcher.register(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> action = payload.action;</div><div class="line"></div><div class="line">	<span class="keyword">switch</span>(action.actionType) &#123;</div><div class="line">		<span class="keyword">case</span> MacgyverConstants.RECEIVE_SITUATIONS_DATA:</div><div class="line">			loadSituationsData(action.data);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MacgyverConstants.CHECK_ANSWER:</div><div class="line">			checkAnswer(action.data);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	SituationStore.emitChange();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The React view (in this case Game.jsx) registers an event listener for these changes in the SituationStore using the React “componentDidMount” function. When the situation is received by the component it rebinds to the data by loading the sitution and the possible answers.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Game = React.createClass(&#123;</div><div class="line"></div><div class="line">	<span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		SituationStore.addChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">		ToolStore.addChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		SituationStore.removeChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">		ToolStore.removeChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">render</span>: ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When the user selects an answer this fires off another “CHECK_ANSWER” event to the dispatcher. The situation store recieves this event with the answer in the payload and checks whether the answer selected is the correct one. If it is it updates the situation and emits a changes event to which the view receives and rebinds the view to the new situation.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Flux can be quite difficult to fathom eventhough it is quite a simple architectural pattern. In this small example it does initially feel overly complex and indeed it probably is. The pattern was designed to solve issues that occur at large scale in MVC applications due to the increased amound of bi-directional dependencies between views and models. For smaller applications it could be seen as over-engineered, however I really like the simplicity in the uni-directional flow and the assurance that unit tests are almost always going to mimic the state changes possible in your application because of the guarantee of a simple flow of data.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-Flux&quot;&gt;&lt;a href=&quot;#What-is-Flux&quot; class=&quot;headerlink&quot; title=&quot;What is Flux?&quot;&gt;&lt;/a&gt;What is Flux?&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/flux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux&lt;/a&gt; is an application architectural pattern developed by Facebook. It was developed to solve some of the complexities of the MVC pattern when used at scale by favouring a uni-directional approach. It is a pattern and not a technology or framework.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/mvc-scale.png&quot; alt=&quot;MVC scale issue&quot;&gt;&lt;/p&gt;
&lt;p&gt;When applications that use the model-view-controller (MVC) pattern at any scale it becomes difficult to maintain consistent data across multiple views. In particular the case whereby flow between models and views is not uni-directional and may require increasing logic to maintain parity between views when model data is updated. Facebook hit this issue several times and in particular with their unseen count (an incremented value of unseen messages which is updated by several UI chat components). It wasn’t until they realised that the MVC pattern accomodated the complexity that they stepped back from the problem and addressed the architecture.&lt;/p&gt;
&lt;p&gt;Flux is intentionally unidirectional.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/flux.png&quot; alt=&quot;flux&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://tech.opentable.co.uk/blog/categories/JavaScript/"/>
    
      <category term="Macgyver" scheme="http://tech.opentable.co.uk/blog/categories/Macgyver/"/>
    
      <category term="Flux" scheme="http://tech.opentable.co.uk/blog/categories/Flux/"/>
    
  </entry>
  
  <entry>
    <title>Supporting IE8 in the OpenTable redesign</title>
    <link href="http://tech.opentable.co.uk//blog/2014/12/08/supporting-ie8-in-the-opentable-redesign/"/>
    <id>http://tech.opentable.co.uk//blog/2014/12/08/supporting-ie8-in-the-opentable-redesign/</id>
    <published>2014-12-08T21:14:57.000Z</published>
    <updated>2016-10-24T10:26:47.220Z</updated>
    
    <content type="html"><![CDATA[<p>We’re really <a href="http://blog.opentable.com/2014/opentables-website-re-designed-re-architected-re-imagined/" target="_blank" rel="external">proud to have released</a> last week our redesigned <a href="http://www.opentable.co.uk" target="_blank" rel="external">OpenTable</a> site, the culmination of months of hard work from many talented people here in London and in San Francisco.</p>
<p>However despite killing off our old site and its 2004 design, 2.8% of our visitors could have been crying into their keyboard as a far worse opentable.co.uk filled their screen.</p>
<p>That version of OpenTable was our new responsive site viewed in Internet Explorer 8.</p>
<p><img src="/images/posts/redesign-ie8.png" alt="Our redesign before we optimised for IE8"></p>
<p>The fundamental issue is that IE8 doesn’t support media queries so the age-old browser would try to stretch our <em>mobile-first</em> responsive design as wide as it could go - not great across a 27” Thunderbolt.</p>
<p>To solve the problem we first tried the <a href="https://github.com/scottjehl/Respond" target="_blank" rel="external">Respond.js</a> polyfill but this didn’t work as we’d hoped.  The main issue appeared to be that because we serve our CSS and JS on a separate sub-domain we fell foul of the browser’s cross-domain security.  We followed the Respond.js instructions to solve this but having no luck we looked for alternatives.</p>
<h2 id="Legacssy"><a href="#Legacssy" class="headerlink" title="Legacssy"></a>Legacssy</h2><p>Further Googling lead us to <a href="https://github.com/robinpokorny/grunt-legacssy" target="_blank" rel="external">Legacssy</a>. With this Grunt task we could create a IE8-only stylesheet and not have to serve extra JS and cross-domain proxy files to all visitors.</p>
<p>Our existing process is to create our core CSS with an <code>app.scss</code> file and <a href="https://github.com/sindresorhus/grunt-sass" target="_blank" rel="external">grunt-sass</a>.  Our additional step was to create an <code>app_ie8.scss</code> file, parse it with <code>grunt-sass</code> like before, but then also run it through Legacssy.</p>
<h3 id="Our-app-scss-file"><a href="#Our-app-scss-file" class="headerlink" title="Our app.scss file"></a>Our app.scss file</h3><pre><code>@import &apos;normalize&apos;;

@import &apos;components/global&apos;;

@import
  &apos;components/icons&apos;,
  &apos;components/buttons&apos;,
  &apos;components/calendar&apos;,
  &apos;components/forms&apos;,
  &apos;components/pagination&apos;,
  &apos;components/star-rating&apos;;

@import
  &apos;partials/footer&apos;,
  &apos;partials/header&apos;,
  &apos;partials/location-picker&apos;;
</code></pre><h3 id="And-our-app-ie8-scss-file"><a href="#And-our-app-ie8-scss-file" class="headerlink" title="And our app_ie8.scss file"></a>And our app_ie8.scss file</h3><pre><code>@import ‘app&apos;;
@import &apos;browsers/_ie8.scss&apos;;
</code></pre><p>This process left us with a duplicate of the main site CSS that would be IE8 friendly - and as you can see we are also able to merge in an IE8 specific stylesheet with further overrides.  All we now needed to was serve this inside conditional comments after the main stylesheet, and CSS specificity would ensure our IE rules overwrite the media queries.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lte IE 8]&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//eu-srs.opentable.com/content/static/css/app_ie8.css&quot; /&gt;</div><div class="line">&lt;![endif]—&gt;</div></pre></td></tr></table></figure>
<h2 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks"></a>Drawbacks</h2><p>We are very happy with this solution as it generates the IE8 fixes as part of our automated build with no extra effort.  The only obvious negative is for the IE8 visitors who will effectively be downloading the same stylesheet twice, but if they are routinely browsing the web with IE8 this could be the least of their worries.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We’re really proud of our new site; we’re still ironing out some kinks but we hope that it’s good enough for those of you who visit us with Internet Explorer 8 (probably through no fault of your own).</p>
<p>For the record, here a couple of other issues we found which may help other intrepid developers with their IE debugging in 2015 and beyond.</p>
<h3 id="Other-IE8-issues"><a href="#Other-IE8-issues" class="headerlink" title="Other IE8 issues"></a>Other IE8 issues</h3><ul>
<li>The other unsupported CSS values were rem units and RGBA colours.  After running Legacssy we used <a href="https://github.com/robwierzbowski/grunt-pixrem" target="_blank" rel="external">pixrem.js</a> to replace rems with pixels and a custom task to replace RGBA values with their HEX equivalents.</li>
<li>IE11’s F12 developer tools don’t render identically to native IE8. We used Microsoft’s excellent <a href="http://www.modern.ie" target="_blank" rel="external">modern.ie</a> site to download virtual machines with Windows 7 and IE8.</li>
<li>We only tested on Windows 7 as this makes up 66% of our IE8 visitors. The remainder are on different operating systems which collectively only make up 0.95% of our total visitors; this is below our threshold for support.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We’re really &lt;a href=&quot;http://blog.opentable.com/2014/opentables-website-re-designed-re-architected-re-imagined/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proud to have released&lt;/a&gt; last week our redesigned &lt;a href=&quot;http://www.opentable.co.uk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenTable&lt;/a&gt; site, the culmination of months of hard work from many talented people here in London and in San Francisco.&lt;/p&gt;
&lt;p&gt;However despite killing off our old site and its 2004 design, 2.8% of our visitors could have been crying into their keyboard as a far worse opentable.co.uk filled their screen.&lt;/p&gt;
&lt;p&gt;That version of OpenTable was our new responsive site viewed in Internet Explorer 8.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/redesign-ie8.png&quot; alt=&quot;Our redesign before we optimised for IE8&quot;&gt;&lt;/p&gt;
&lt;p&gt;The fundamental issue is that IE8 doesn’t support media queries so the age-old browser would try to stretch our &lt;em&gt;mobile-first&lt;/em&gt; responsive design as wide as it could go - not great across a 27” Thunderbolt.&lt;/p&gt;

    
    </summary>
    
    
      <category term="Design" scheme="http://tech.opentable.co.uk/blog/categories/Design/"/>
    
      <category term="OpenTable" scheme="http://tech.opentable.co.uk/blog/categories/OpenTable/"/>
    
      <category term="CSS" scheme="http://tech.opentable.co.uk/blog/categories/CSS/"/>
    
      <category term="Grunt" scheme="http://tech.opentable.co.uk/blog/categories/Grunt/"/>
    
      <category term="Sass" scheme="http://tech.opentable.co.uk/blog/categories/Sass/"/>
    
      <category term="Internet Explorer" scheme="http://tech.opentable.co.uk/blog/categories/Internet-Explorer/"/>
    
  </entry>
  
  <entry>
    <title>Proxying Services With Hapi.js</title>
    <link href="http://tech.opentable.co.uk//blog/2014/11/28/proxying-with-hapi/"/>
    <id>http://tech.opentable.co.uk//blog/2014/11/28/proxying-with-hapi/</id>
    <published>2014-11-28T10:32:42.000Z</published>
    <updated>2016-10-24T10:25:57.012Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve raved in the past about how awesome <a href="http://hapijs.com" target="_blank" rel="external">hapi.js</a> is, but I’m going to talk about just a specific case today.</p>
<p>We started off with just a couple of hapi.js apis. This was at a time when standing up new infrastructure was still a bit painful, so inevitably those apis ended up having more functionality in them than they should have. Now it’s easy for us to get infrastructure, so we want to do more of it.</p>
<p>Our goal is to have lots of small(er) apis that just look after one specific piece (skillfully avoiding using the buzzword ‘microservices’).</p>
<p>When you want to split out functionality from one api to another, it can be a pain, especially if you have a lot of consumers who aren’t particularly fast-moving or communicative. Or maybe you don’t know all your consumers up front.</p>
<p>You’ve got a couple of options here:</p>
<ul>
<li><p>Maintain the functionality in two places and slowly migrate consumers across</p>
</li>
<li><p>Use a proxy or routing layer in-front of the api to rewrite or redirect requests</p>
</li>
<li><p>Write code in your api to proxy requests to a different server</p>
</li>
</ul>
<p>The first two options are pretty icky, and frankly the third isn’t all that great either. It all depends on you having the right framework. Do you see where I’m going here?</p>
<h3 id="Enter-Hapi-js"><a href="#Enter-Hapi-js" class="headerlink" title="Enter Hapi.js"></a>Enter Hapi.js</h3><p>Hapi.js has the concept of a ‘proxy’ handler, which can transparently proxy requests to a different server.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server.route([</div><div class="line">  &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/foo'</span>,</div><div class="line">    <span class="attr">handler</span>: &#123;</div><div class="line">      <span class="attr">proxy</span>: &#123;</div><div class="line">        <span class="attr">host</span>: <span class="string">'my-other-service.mydomain.com'</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">80</span>,</div><div class="line">        <span class="attr">protocol</span>: <span class="string">'http'</span>,</div><div class="line">        <span class="attr">passThrough</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">xforward</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]);</div></pre></td></tr></table></figure>
<p>And boom, you’re done. You can now safely delete <em>all</em> of that code from your api and move it. The <em>only</em> thing you need to have kicking about is that proxy handler code.</p>
<p>The <code>passthrough</code> setting specifies whether or not to preserve headers on the original request, and <code>xforward</code> tells hapi to add (or append) an ‘x-forwarded-for’ header to the request.</p>
<p>The proxy handler is really powerful. It can rewrite the request (using <code>mapUri</code>), pass local-state (from the hapi instance) along, reject unauthorised requests, you can even hook into the response and monkey about with it if you want (using <code>onResponse</code>).</p>
<p>For full details, see the <a href="http://hapijs.com/api/v7.5.2#route-options" target="_blank" rel="external">proxy section</a> of the route options.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve raved in the past about how awesome &lt;a href=&quot;http://hapijs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hapi.js&lt;/a&gt; is, but I’m going to talk about just a specific case today.&lt;/p&gt;
&lt;p&gt;We started off with just a couple of hapi.js apis. This was at a time when standing up new infrastructure was still a bit painful, so inevitably those apis ended up having more functionality in them than they should have. Now it’s easy for us to get infrastructure, so we want to do more of it.&lt;/p&gt;
&lt;p&gt;Our goal is to have lots of small(er) apis that just look after one specific piece (skillfully avoiding using the buzzword ‘microservices’).&lt;/p&gt;
&lt;p&gt;When you want to split out functionality from one api to another, it can be a pain, especially if you have a lot of consumers who aren’t particularly fast-moving or communicative. Or maybe you don’t know all your consumers up front.&lt;/p&gt;
&lt;p&gt;You’ve got a couple of options here:&lt;/p&gt;

    
    </summary>
    
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="Hapi.js" scheme="http://tech.opentable.co.uk/blog/categories/Hapi-js/"/>
    
      <category term="Proxy" scheme="http://tech.opentable.co.uk/blog/categories/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Hobknob v2.0: A new dimension</title>
    <link href="http://tech.opentable.co.uk//blog/2014/11/26/hobknob-v2-dot-0-a-new-dimension/"/>
    <id>http://tech.opentable.co.uk//blog/2014/11/26/hobknob-v2-dot-0-a-new-dimension/</id>
    <published>2014-11-26T10:11:37.000Z</published>
    <updated>2016-10-24T10:24:26.474Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes there is the requirement for more granularity when toggling a feature switch.<br>Version 2.0 of <a href="https://github.com/opentable/hobknob" target="_blank" rel="external">Hobknob</a> hopes to address this with feature categories.</p>
<h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR."></a>TL;DR.</h3><p>Hobknob now allows you to define categories of features that have multiple toggles per feature.</p>
<p>For example, you can define the ‘Domain Features’ category which allows you to toggle a feature OFF in <code>your-website.com</code>, but ON in <code>your-website.co.uk</code>.</p>
<p><img src="/images/posts/hobknob-domain-features.png" alt="Domain Features"></p>
<h2 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h2><p>Feature categories are configured with a few pieces of information. For example:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"categories"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Simple Features"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Use when you want your feature to be either on or off"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Domain Features"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Use when you want your features to be toggled separately for different domains"</span>,</div><div class="line">      <span class="attr">"values"</span>: [<span class="string">"com"</span>, <span class="string">"couk"</span>, <span class="string">"de"</span>, <span class="string">"commx"</span>, <span class="string">"jp"</span>, <span class="string">"ca"</span>]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Locale Features"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Use when you want your features to be toggled separately for different locales"</span>,</div><div class="line">      <span class="attr">"values"</span>: [<span class="string">"en-GB"</span>, <span class="string">"en-US"</span>, <span class="string">"fr-CA"</span>, <span class="string">"de-DE"</span>, <span class="string">"ja-JP"</span>, <span class="string">"es-MX"</span>]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Notice that each category (except the simple feature category) provides an array of accepted toggle values.</p>
<p>All non-simple feature toggles will have the key <code>application-name/feature-name/toggle-name</code>.<br>For example, <code>main-website/show-user-section/com</code>.</p>
<p>Simple features will continue to have the key <code>application-name/feature-name</code>.</p>
<h2 id="Setting-Toggles"><a href="#Setting-Toggles" class="headerlink" title="Setting Toggles"></a>Setting Toggles</h2><p>Both simple and non-simple features are added via the application view (which is accessed via the left-hand navigation menu). Simple features are automatically set to false, this value can be changed in the feature view (by clicking the feature name).</p>
<p>A newly added non-simple feature will be initialised with no toggles values. You can add a toggle by clicking the Add Toggle button in the feature view, and choosing which toggle to add. </p>
<p><img src="/images/posts/hobknob-adding-toggle.png" alt="Adding a toggle"></p>
<p>New toggles are initially set to OFF. The toggle can be switched in the usual way by clicking the toggle button. You should also see an audit of the change in the panel below.</p>
<h2 id="Getting-Toggles"><a href="#Getting-Toggles" class="headerlink" title="Getting Toggles"></a>Getting Toggles</h2><p>All of the Hobknob <a href="https://github.com/opentable/hobknob#hobknob-clients" target="_blank" rel="external">clients</a> now support getting non-simple features toggles. The only requirement is to pass the name of the toggle, so for example in node:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nonSimpleFeatureInCom = hobknobClient.getOrDefault(<span class="string">'feature-name'</span>, <span class="string">'com'</span>, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>It is highly reccommended that you use the get or default methods when accessing non-simple features. Getting a toggle that does not exist for a non-simple feature could be a likely scenario, since you might want to only set a feature for a few toggles explicitly (e.g. com and couk) and then use the default value for the rest (e.g. jp and de).</p>
<p>The behaviour for simple features has not changed, and is backwards compatible in all client libraries.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> simpleFeature = hobknobClient.getOrDefault(<span class="string">'simple-feature'</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes there is the requirement for more granularity when toggling a feature switch.&lt;br&gt;Version 2.0 of &lt;a href=&quot;https://github.com/opentable/hobknob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hobknob&lt;/a&gt; hopes to address this with feature categories.&lt;/p&gt;
&lt;h3 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR.&quot;&gt;&lt;/a&gt;TL;DR.&lt;/h3&gt;&lt;p&gt;Hobknob now allows you to define categories of features that have multiple toggles per feature.&lt;/p&gt;
&lt;p&gt;For example, you can define the ‘Domain Features’ category which allows you to toggle a feature OFF in &lt;code&gt;your-website.com&lt;/code&gt;, but ON in &lt;code&gt;your-website.co.uk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/hobknob-domain-features.png&quot; alt=&quot;Domain Features&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Categories&quot;&gt;&lt;a href=&quot;#Categories&quot; class=&quot;headerlink&quot; title=&quot;Categories&quot;&gt;&lt;/a&gt;Categories&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Hobknob" scheme="http://tech.opentable.co.uk/blog/categories/Hobknob/"/>
    
  </entry>
  
  <entry>
    <title>Interacting with ElasticSearch using Hubot</title>
    <link href="http://tech.opentable.co.uk//blog/2014/11/08/interacting-with-elasticsearch-using-hubot/"/>
    <id>http://tech.opentable.co.uk//blog/2014/11/08/interacting-with-elasticsearch-using-hubot/</id>
    <published>2014-11-08T10:32:42.000Z</published>
    <updated>2016-10-24T10:24:30.933Z</updated>
    
    <content type="html"><![CDATA[<p>At OpenTable, we use a few <a href="">ElasticSearch</a> clusters. Our aim was to be able to interact with our ElasticSearch clusters via <a href="http://www.hipchat.com" target="_blank" rel="external">HipChat</a> so that we could troubleshoot easily and without having to log into our VPN. We already use <a href="http://hubot.github.com" target="_blank" rel="external">Hubot</a> as part of our systems workflow, so it made sense to be able to interact with ElasticSearch with it. </p>
<h3 id="Setting-a-cluster-alias"><a href="#Setting-a-cluster-alias" class="headerlink" title="Setting a cluster alias"></a>Setting a cluster alias</h3><p>When a pager wakes me at 3am, I really do not want to have to try and type the cluster URL into my mobile hipchat client. So the first thing that was added to the script was the ability to give a cluster an alias.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch add alias my-test-alias http://my-cluster.com:9200</div></pre></td></tr></table></figure>
<p><img src="/images/posts/elasticsearch-add-alias.png" alt="add-alias"></p>
<p>This allows us to use that alias for all commands going forward. Please note that you can remove and query aliases as well:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch show aliases</div></pre></td></tr></table></figure>
<p><img src="/images/posts/elasticsearch-show-aliases.png" alt="show-alias"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch clear alias my-test-alias</div></pre></td></tr></table></figure>
<p><img src="/images/posts/elasticsearch-clear-alias.png" alt="clear-alias"></p>
<h3 id="Using-the-ElasticSearch-Cat-API"><a href="#Using-the-ElasticSearch-Cat-API" class="headerlink" title="Using the ElasticSearch Cat API"></a>Using the ElasticSearch Cat API</h3><p>A lot of what we do with ElasticSearch can be done via the <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat.html" target="_blank" rel="external">cat</a> API. This has proved extremely useful to get node status, cluster health and index status. </p>
<h4 id="Cat-Health"><a href="#Cat-Health" class="headerlink" title="Cat Health"></a>Cat Health</h4><p>As documented <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat-health.html#cat-health" target="_blank" rel="external">here</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch cluster health my-test-alias</div></pre></td></tr></table></figure>
<h4 id="Cat-Nodes"><a href="#Cat-Nodes" class="headerlink" title="Cat Nodes"></a>Cat Nodes</h4><p>As documented <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat-nodes.html" target="_blank" rel="external">here</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">elasticsearch cat nodes my-test-alias</div><div class="line">``` </div><div class="line"></div><div class="line">#### Cat Indices </div><div class="line">As documented [here](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat-indices.html)</div></pre></td></tr></table></figure>
<p>elasticsearch cat indexes my-test-alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### Cat Allocation</div><div class="line">As documented [here]()</div></pre></td></tr></table></figure></p>
<p>elasticsearch cat allocation my-test-alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Getting the Cluster Settings</div><div class="line"></div><div class="line">Sometimes when we are rebalancing shards or recycling nodes, we want to be able to control the cluster settings. By using the cluster settings API, can have some insight into the settings currently set on the cluster:</div></pre></td></tr></table></figure></p>
<p>elasticsearch cluster settings my-test-alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">More information about the cluster settings API can be found [here](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-update-settings.html#cluster-settings)</div><div class="line"></div><div class="line">### Getting the Settings for an Index</div><div class="line"></div><div class="line">Should we want to start to understand the actual settings that are attributed to an index, we can use the Cat Indices settings API. More information can be found [here](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-get-settings.html)</div></pre></td></tr></table></figure></p>
<p>elasticsearch index settings my-test-alias my-index-name-2014-11-07<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Clearing the cluster Cache</div><div class="line"></div><div class="line">The last piece of the puzzle we are able to do, is to clear the cache of the ElasticSearch cluster. This can be done as follows:</div></pre></td></tr></table></figure></p>
<p>hubot elasticsearch clear cache my-test-alias<br>```</p>
<h3 id="Where-can-I-find-the-code"><a href="#Where-can-I-find-the-code" class="headerlink" title="Where can I find the code?"></a>Where can I find the code?</h3><p>The code is available on <a href="https://github.com/stack72/hubot-elasticsearch" target="_blank" rel="external">github</a> or also as an <a href="https://www.npmjs.org/package/hubot-elasticsearch" target="_blank" rel="external">NPM package</a>. Please feel free to send PRs or create issues on our repository. All feedback is useful.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At OpenTable, we use a few &lt;a href=&quot;&quot;&gt;ElasticSearch&lt;/a&gt; clusters. Our aim was to be able to interact with our ElasticSearch clusters via &lt;a href=&quot;http://www.hipchat.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HipChat&lt;/a&gt; so that we could troubleshoot easily and without having to log into our VPN. We already use &lt;a href=&quot;http://hubot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hubot&lt;/a&gt; as part of our systems workflow, so it made sense to be able to interact with ElasticSearch with it. &lt;/p&gt;
&lt;h3 id=&quot;Setting-a-cluster-alias&quot;&gt;&lt;a href=&quot;#Setting-a-cluster-alias&quot; class=&quot;headerlink&quot; title=&quot;Setting a cluster alias&quot;&gt;&lt;/a&gt;Setting a cluster alias&lt;/h3&gt;&lt;p&gt;When a pager wakes me at 3am, I really do not want to have to try and type the cluster URL into my mobile hipchat client. So the first thing that was added to the script was the ability to give a cluster an alias.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;elasticsearch add alias my-test-alias http://my-cluster.com:9200&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/elasticsearch-add-alias.png&quot; alt=&quot;add-alias&quot;&gt;&lt;/p&gt;
&lt;p&gt;This allows us to use that alias for all commands going forward. Please note that you can remove and query aliases as well:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hubot" scheme="http://tech.opentable.co.uk/blog/categories/Hubot/"/>
    
      <category term="Chatops" scheme="http://tech.opentable.co.uk/blog/categories/Chatops/"/>
    
      <category term="ElasticSearch" scheme="http://tech.opentable.co.uk/blog/categories/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Coach don&#39;t rescue</title>
    <link href="http://tech.opentable.co.uk//blog/2014/10/31/coach-dont-rescue/"/>
    <id>http://tech.opentable.co.uk//blog/2014/10/31/coach-dont-rescue/</id>
    <published>2014-10-31T10:14:04.000Z</published>
    <updated>2016-10-24T10:23:16.294Z</updated>
    
    <content type="html"><![CDATA[<p>I recently attended a fascinating and emotionally-charged talk by <a href="https://twitter.com/sisoma" target="_blank" rel="external">Samantha Soma</a> at <a href="https://2014.dareconf.com" target="_blank" rel="external">DareConf 2014</a>, <a href="http://vimeo.com/108047198" target="_blank" rel="external">‘How to stop rescuing people’</a>. It strongly mirrored my experience of moving into a leadership role and I’d recommend anyone with a spare 30mins to watch it.</p>
<p>Samantha’s talk made me reflect on how I struggle to coach talented individuals; how I can identify when it’s going wrong and what steps I can take to remedy the situation.</p>
<h2 id="Gold-star-syndrome"><a href="#Gold-star-syndrome" class="headerlink" title="Gold star syndrome"></a>Gold star syndrome</h2><p>A new concept for me and a recurring theme throughout the sessions at DareConf, ‘Gold Star Syndrome’ is a fixation on finding validation for your work. I feel this is a result of early childhood values spinning the perception of working life away from the actual reality. As a child, especially during our school years, we discovered that when we do good things, good things happen to us. Remember how it felt to get that gold star in your spelling test or that A+ on an English essay?</p>
<p>That was great in school and even through to University but working life is a much more terse environment and getting positive reenforcement is much less common. As professionals, the majority of our work goes unnoticed - until there is a problem or issue to solve. Then we feel open to the stinging criticism but resentful that months of good work went unnoticed.</p>
<p>When we continue to search for a gold star or continually strive for perfectionism we, as individuals, become much more insular and isolated. We tend to avoid showing our work until it is 100% ready and put up a shield to protect us from any feedback, in fear of being made to look stupid or being called a fraud.</p>
<h2 id="Empowerment"><a href="#Empowerment" class="headerlink" title="Empowerment"></a>Empowerment</h2><p>There is a considerable amount of <a href="http://whatworksforhealth.wisc.edu/program.php?t1=20&amp;t2=6&amp;t3=84&amp;id=311" target="_blank" rel="external">research</a> to suggest children who have bad experiences and manage to overcome them tend to grow up to become more rounded adults. By encouraging grit and allowing kids to solve their own problems, children learn they are empowered. They become more creative, more respectful, less dependant on others and display less problem behaviour.</p>
<p>This is also relatively easy to implement and can be as simple as involving children in a decision-making process. ‘What do you want to eat with dinner; carrots or broccoli’? This might progress to ‘What colour socks do you want to wear?’ or ‘Which swing do you want to play on?’</p>
<p>The concept of preventing yourself from controlling a situation is really key to successful coaching. Rescuing people by dictating an outcome  requires one weak person and one strong person. This propagates itself so people drift towards being a victim or a rescuer. A much better outcome would be a group of confident, empowered individuals who are able to work together.</p>
<h2 id="Provide-tools-not-solutions"><a href="#Provide-tools-not-solutions" class="headerlink" title="Provide tools not solutions"></a>Provide tools not solutions</h2><p>Even if they are unaware themselves, individuals we coach don’t want a solution to their problem. What they want is for you to help them find their own solution. To paraphrase a great line in Samantha’s presentation - ‘Our role is to give people a view of the life they want instead of giving them the life we think they want.’</p>
<p>And how can we start doing that? I have started to adopt Samantha’s principles and have been staggered by how effective they are in practice:</p>
<ol>
<li><p><a href="http://outsmartyourbrain.com/find-your-emotional-triggers-on-this-list/" target="_blank" rel="external">Know your triggers</a> - what words and situations make you race to help a colleague in distress? Are there patterns you can spot and say ‘Hang on I’ve been here before’?</p>
</li>
<li><p><a href="http://www.successrockets.com/Blog-Professional-Personal-Development/bid/51210/Leadership-Development-Skill-Detached-Involvement" target="_blank" rel="external">Maintain engaged detachment</a> - this is tough and requires us to build and nurture a certain skill set; if all else fails remember <a href="http://www.huffingtonpost.com/karen-ann-kennedy/not-my-circus-not-my-monk_b_5390455.html" target="_blank" rel="external">‘Not my circus, not my monkeys’</a>.</p>
</li>
<li><p><a href="http://www.mindtools.com/pages/article/newTMC_85.htm" target="_blank" rel="external">Appreciative Inquiry</a> - there are lots of models and frameworks out there but in essence Appreciative Inquiry  boils down to asking someone lots of questions and listening intently to their response, however difficult!</p>
</li>
<li><p><a href="http://centerx.gseis.ucla.edu/xchange/teacher-leadership/teacher-workroom/reflecting-conversation" target="_blank" rel="external">Challenge them to reflect on what happened</a> - before an individual can see past the problem, they need to acknowledge the problem and the events that lead them there.</p>
</li>
<li><p><a href="http://www.reallifecoaching.net/tips-on-committing-to-your-goals/" target="_blank" rel="external">Ask them to articulate what they want to happen next</a> - coach them through how this problem can be solved and what steps they might take to resolve it. This commitment helps to clarify any misunderstanding and sets a clear path forward for coach and coachee.</p>
</li>
<li><p><a href="http://www.myinternalgps.com/?p=1149" target="_blank" rel="external">Celebrate their success</a> - a pat on the back (mentally or physically) can go a long way. Why should individuals receive feedback when there is a problem? Loop back with people and celebrate the small wins as much as possible.</p>
</li>
</ol>
<h2 id="Leaders-are-not-lifeguards"><a href="#Leaders-are-not-lifeguards" class="headerlink" title="Leaders are not lifeguards!"></a>Leaders are not lifeguards!</h2><p>While not exactly child’s play, I hope you have read enough here to spot the danger signs and modify your approach away from the rescuer role that ultimately helps no one.</p>
<p>Effective leaders stop jumping to the rescue and start coaching people through a bad experience, empowering individuals by providing them with the tools to come to their own conclusions and solve their own problems.</p>
<h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><p><a href="http://outsmartyourbrain.com/stop-fixing-people-what-to-do-when-your-brilliant-ideas-arent-helping/" target="_blank" rel="external">http://outsmartyourbrain.com/stop-fixing-people-what-to-do-when-your-brilliant-ideas-arent-helping/</a></p>
<p><a href="http://www.huffingtonpost.com/nora-t-akins/resist-the-rescue-management_b_5537309.html" target="_blank" rel="external">http://www.huffingtonpost.com/nora-t-akins/resist-the-rescue-management_b_5537309.html</a></p>
<p><a href="http://teambuildersplus.com/articles/heroic-leaders-dont-always-save-the-day" target="_blank" rel="external">http://teambuildersplus.com/articles/heroic-leaders-dont-always-save-the-day</a></p>
<p><a href="http://www.dialogueworks.com/pages/blogs.php?blog_id=52#.VDery9TF87d" target="_blank" rel="external">http://www.dialogueworks.com/pages/blogs.php?blog_id=52#.VDery9TF87d</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I recently attended a fascinating and emotionally-charged talk by &lt;a href=&quot;https://twitter.com/sisoma&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Samantha Soma&lt;/a&gt; at &lt;a href=&quot;https://2014.dareconf.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DareConf 2014&lt;/a&gt;, &lt;a href=&quot;http://vimeo.com/108047198&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;‘How to stop rescuing people’&lt;/a&gt;. It strongly mirrored my experience of moving into a leadership role and I’d recommend anyone with a spare 30mins to watch it.&lt;/p&gt;
&lt;p&gt;Samantha’s talk made me reflect on how I struggle to coach talented individuals; how I can identify when it’s going wrong and what steps I can take to remedy the situation.&lt;/p&gt;
&lt;h2 id=&quot;Gold-star-syndrome&quot;&gt;&lt;a href=&quot;#Gold-star-syndrome&quot; class=&quot;headerlink&quot; title=&quot;Gold star syndrome&quot;&gt;&lt;/a&gt;Gold star syndrome&lt;/h2&gt;&lt;p&gt;A new concept for me and a recurring theme throughout the sessions at DareConf, ‘Gold Star Syndrome’ is a fixation on finding validation for your work. I feel this is a result of early childhood values spinning the perception of working life away from the actual reality. As a child, especially during our school years, we discovered that when we do good things, good things happen to us. Remember how it felt to get that gold star in your spelling test or that A+ on an English essay?&lt;/p&gt;
&lt;p&gt;That was great in school and even through to University but working life is a much more terse environment and getting positive reenforcement is much less common. As professionals, the majority of our work goes unnoticed - until there is a problem or issue to solve. Then we feel open to the stinging criticism but resentful that months of good work went unnoticed.&lt;/p&gt;
&lt;p&gt;When we continue to search for a gold star or continually strive for perfectionism we, as individuals, become much more insular and isolated. We tend to avoid showing our work until it is 100% ready and put up a shield to protect us from any feedback, in fear of being made to look stupid or being called a fraud.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leadership" scheme="http://tech.opentable.co.uk/blog/categories/Leadership/"/>
    
      <category term="Coaching" scheme="http://tech.opentable.co.uk/blog/categories/Coaching/"/>
    
      <category term="Work smarter" scheme="http://tech.opentable.co.uk/blog/categories/Work-smarter/"/>
    
      <category term="Culture" scheme="http://tech.opentable.co.uk/blog/categories/Culture/"/>
    
  </entry>
  
  <entry>
    <title>Hobknob v1.0: Now with authorization</title>
    <link href="http://tech.opentable.co.uk//blog/2014/10/22/hobknob-v1-dot-0-now-with-authorization/"/>
    <id>http://tech.opentable.co.uk//blog/2014/10/22/hobknob-v1-dot-0-now-with-authorization/</id>
    <published>2014-10-22T14:00:31.000Z</published>
    <updated>2016-10-24T10:24:22.027Z</updated>
    
    <content type="html"><![CDATA[<p>We are pleased to announce the version 1.0 release of <a href="https://github.com/opentable/hobknob" target="_blank" rel="external">Hobknob</a>, our open-source feature toggle management system. With it comes a few additions and several improvements. </p>
<p>This post will expand on some of the changes, in particular, authorisation via access control lists.<br>For an introduction to Hobknob, see our previous post: <a href="/blog/2014/09/04/introducing-hobknob-feature-toggling-with-etcd/">Introducing Hobknob: Feature toggling with etcd</a>.</p>
<h2 id="Authorisation-with-ACLs"><a href="#Authorisation-with-ACLs" class="headerlink" title="Authorisation with ACLs"></a>Authorisation with ACLs</h2><p>A much requested feature was the ability to control who can add/update/delete toggles on an application by application basis. We achieve this via the use if an Access Control List for each application. Users that are part of the ACL for an application are known as application owners.</p>
<p><img src="/images/posts/hobknob-owners.png" alt="Hobknob Owner List"></p>
<p>Application owners can (for an owned application):</p>
<ul>
<li>Add toggles</li>
<li>Set the value of a toggle</li>
<li>Delete toggles</li>
<li>Add additional owners</li>
<li>Remove owners</li>
</ul>
<p>Everyone can:</p>
<ul>
<li>Add an application</li>
<li>See toggles</li>
<li>See application owners</li>
<li>See the audit trail for a toggle</li>
</ul>
<p>When a user creates an new application, they are automatically added as an owner for that application.<br>The user can then add other application owners by clicking the ‘Add user’ button in the Owners panel and entering the users email address.</p>
<p><strong>Note:</strong> this feature is only available when authentication is enabled. If Hobknob is not configured to require authentication, everyone has owner permissions to all applications. See the <a href="https://github.com/opentable/hobknob#configuring-authentication" target="_blank" rel="external">readme</a> for more information on how to configure authentication.</p>
<h2 id="Deleting-Toggles"><a href="#Deleting-Toggles" class="headerlink" title="Deleting Toggles"></a>Deleting Toggles</h2><p>Feature toggles can now be deleted. This ability is available on the toggle view (get there by clicking a toggle name in the application view).</p>
<p><img src="/images/posts/hobknob-delete.png" alt="Hobknob Toggle Delete"></p>
<p>You’ll notice the delete toggle button in the Danger Zone panel (we didn’t steal that idea from Github, honest). You’ll need to confirm the delete by clicking the delete button a second time.</p>
<p><strong>Warning:</strong> Deleting a toggle will perform a ‘hard’ delete, that is, the key is deleted in etcd. The audit will persist however, and can be accessed via this route: <code>/#!/applications/app-name/toggle-name</code>. You are also allowed to re-add a toggle, and the audit will be appended to an existing audit for that toggle name.</p>
<p><strong>Note:</strong> If authentication is enabled, you must be an application owner to delete a toggle.</p>
<h2 id="Makeover"><a href="#Makeover" class="headerlink" title="Makeover"></a>Makeover</h2><p>Gone is the ‘Add Toggle’ modal dialog from the previous version. This is replaced by two separate inline forms.</p>
<p>Applications are now added by clicking ‘Add’ in the sidebar.</p>
<p><img src="/images/posts/hobknob-newapplication.png" alt="Hobknob New Application"></p>
<p>Toggles are added by clicking ‘New Toggle’ in the Toggles panel for an application.</p>
<p><img src="/images/posts/hobknob-newtoggle-v2.png" alt="Hobknob New Toggle"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are pleased to announce the version 1.0 release of &lt;a href=&quot;https://github.com/opentable/hobknob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hobknob&lt;/a&gt;, our open-source feature toggle management system. With it comes a few additions and several improvements. &lt;/p&gt;
&lt;p&gt;This post will expand on some of the changes, in particular, authorisation via access control lists.&lt;br&gt;For an introduction to Hobknob, see our previous post: &lt;a href=&quot;/blog/2014/09/04/introducing-hobknob-feature-toggling-with-etcd/&quot;&gt;Introducing Hobknob: Feature toggling with etcd&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Authorisation-with-ACLs&quot;&gt;&lt;a href=&quot;#Authorisation-with-ACLs&quot; class=&quot;headerlink&quot; title=&quot;Authorisation with ACLs&quot;&gt;&lt;/a&gt;Authorisation with ACLs&lt;/h2&gt;&lt;p&gt;A much requested feature was the ability to control who can add/update/delete toggles on an application by application basis. We achieve this via the use if an Access Control List for each application. Users that are part of the ACL for an application are known as application owners.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/hobknob-owners.png&quot; alt=&quot;Hobknob Owner List&quot;&gt;&lt;/p&gt;
&lt;p&gt;Application owners can (for an owned application):&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hobknob" scheme="http://tech.opentable.co.uk/blog/categories/Hobknob/"/>
    
  </entry>
  
  <entry>
    <title>PuppetConf 2014 - Part 3</title>
    <link href="http://tech.opentable.co.uk//blog/2014/10/06/puppetconf-2014-part-3/"/>
    <id>http://tech.opentable.co.uk//blog/2014/10/06/puppetconf-2014-part-3/</id>
    <published>2014-10-06T13:43:36.000Z</published>
    <updated>2016-10-24T10:26:20.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>This is our summary of PuppetConf 2014. In our <a href="/blog/2014/10/06/puppetconf-2014-part-2/">previous post</a> we gave an overview of the first day of the conference. This post will provide an<br>overview of the final day.</p>
<p>There were even more inspiring keynotes and lots more talks which have given us plenty of ideas to go home and think about.</p>
<h3 id="Key-Notes"><a href="#Key-Notes" class="headerlink" title="Key Notes"></a>Key Notes</h3><h4 id="Animating-the-Puppet-Creating-a-Culture-of-Puppet-Adoption-Dan-Spurling-spurling-Getty-Images-Slides"><a href="#Animating-the-Puppet-Creating-a-Culture-of-Puppet-Adoption-Dan-Spurling-spurling-Getty-Images-Slides" class="headerlink" title="Animating the Puppet: Creating a Culture of Puppet Adoption - Dan Spurling (@spurling), Getty Images - Slides"></a>Animating the Puppet: Creating a Culture of Puppet Adoption - Dan Spurling (<a href="https://twitter.com/spurling" target="_blank" rel="external">@spurling</a>), Getty Images - <a href="http://www.slideshare.net/PuppetLabs/keynote-animating-the-puppet-creating-a-culture-of-puppet-adoption-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><div style="float:right;margin:0 10px 10px 10px;width:50%"><br>  <img src="/images/posts/puppetconf-dan.jpg"><br></div>


<p>Dan Spuring, VP of Tech Services at Getty came out of the gate with a strong message. His <a href="http://www.urbandictionary.com/define.php?term=GSD" target="_blank" rel="external">GSD</a> t-shirt<br>giving you a clear understanding of who he is. His talk about creating a culture of Puppet adoption at his company was a great story of how challenging it<br>can be to move various business units with projects of various ages to a configuration-management (with Puppet) ethos.</p>
<p>I think it is good to hear that they are rolling cm out into that huge backlog of legacy infrastructure that we all try to pretend isn’t there.<br>How do you make it integrate into existing processes? How do you sell the DevOps message at the same time as introducing a tool like Puppet into the mix as<br>part of that message? Dan gave some thoughts on this and it was good to hear some of that from someone who appears to be on the other side of that challenge.</p>
<p>One of the analogies that he used I that found quite useful was that undertaking a project like this is like moving a boulder. It requires an executive sponsor to<br>get the thing moving at all and then it requires everyone pulling in the same direction if it’s ever doing to get anywhere.</p>
<p>The big take-away was that you need to puppetize right away - that you can’t wait for the right environment or conditions to start doing it, you just need<br>start now and demonstrate it. This echo’s the Continuous Delivery ideal of “if it hurts, then do it more often”.</p>
<h4 id="Decentralize-Your-Infrastructure-Alan-Green-Sony-Computer-Entertainment-America-Slides"><a href="#Decentralize-Your-Infrastructure-Alan-Green-Sony-Computer-Entertainment-America-Slides" class="headerlink" title="Decentralize Your Infrastructure - Alan Green, Sony Computer Entertainment America - Slides"></a>Decentralize Your Infrastructure - Alan Green, Sony Computer Entertainment America - <a href="http://www.slideshare.net/PuppetLabs/keynote-decentralize-your-infrastructure-alan-green-sony-computer-entertainment-america" target="_blank" rel="external">Slides</a></h4><div style="float:right;margin:0 10px 10px 10px;width:50%"><br>  <img src="/images/posts/puppetconf-alan.jpg"><br></div>

<p>Alan’s talk posed an interesting argument: decentralise and let your developers choose the tools and services that they want - just make it easy for them to<br>do so. This obviously flies in the face of conventional sysadmin wisdom of trying to centralise, standardise and control everything but for an organisation the<br>size of scale of SCEA this is just never going to work. Sony has many different studios, each has their own special requirements and tooling that they need to<br>try and support.</p>
<p>The story of the interaction with these studios is a great classic sysadmin story that is worth repeating. It starts with something we have all heard before “I<br>need to X right now because it’s preventing me from releasing this game on time”. The reaction here is to either say Yes and risk burning out your people getting<br>it done or No risk your career if the release date gets pushed. As a sysadmin you’re on the back-foot at this point - you pretty much have to do whatever it takes.<br>If you decentralize your infrastructure you get to turn the tables “No I don’t have tool X but we do have tool Y and Z that will meet your needs”. This gives<br>the engineers/managers the choice to make rather than you - they can go out on their own and implement their first choice tool and it will take a bit longer or<br>they can have something supported by the team right now. Alan also made a interesting call-back to Kate Matsudaira’s keynote of the previous day when he said that<br>it’s all about honesty and trust. Be truthful with your engineers about what you are capable of achieving or not.</p>
<p>This is the sort of thing we do here at OpenTable and it’s been working very well. You need to design puppet to be as flexible as possible and to support those<br>teams that need support in their puppet implementations. Having a diverse set of tools is not a bad thing - especially when you are dealing with creative people -<br>it keeps them creative and you can push that creativity back into the product. You’re also decentralising control, giving teams the ability to move their<br>infrastructure as fast as they need to move the product - meaning that your business is going to move faster get meet it’s ROI (because managers care about that<br>sort of thing)</p>
<h4 id="Q-amp-A-with-Luke-Kanies"><a href="#Q-amp-A-with-Luke-Kanies" class="headerlink" title="Q&amp;A with Luke Kanies"></a>Q&amp;A with Luke Kanies</h4><div style="float:right;margin:0 10px 10px 10px;width:50%"><br>  <img src="/images/posts/puppetconf-luke-2.jpg"><br></div>

<p>The last “keynote” of the conference brought Luke back to the stage for a Q&amp;A with the audience. Allowing people to text in questions live led to some amusement<br>and once the silly questions were out of the way ( what is your favourite book?, what is your favourite animal? ) we got down to some of the big questions that<br>people really wanted answers to.</p>
<p><strong>Q</strong>: What is the roadmap for Puppet Apps?<br><br><strong>A</strong>: I would be surprised if we release more than one per quarter, I’d rather put out four than 20, with five releases for each app. We are a small company,<br>and we have to try not to get overextended to the point where we can’t evolve the apps. They have to be evolved to be successful.</p>
<p>This seems fair, they is a lot of work involved in putting together something that is polished and tested and ready for market.</p>
<p><strong>Q</strong>: What is the future of Open Source Puppet?<br><br><strong>A</strong>: My goal is to keep the two products complementary, and to understand each is used for different reasons .. We’re trying to change how the market works<br>and thinks and this is done better with software that’s absolutely everywhere.</p>
<p>He probably gets asked this all the time. The more features that are poured into Enterprise it would be easy to think that the OSS efforts are diminishing and<br>that there is even motivation for them to close-source. My conversations with various parties suggest that this is far from the case and I think that open source<br>puppet community will continue to be vibrant for a long time yet.</p>
<p><strong>Q</strong>: Where does Puppet fit into environments that don’t require convergence, where instead of adjusting the container you just re-provision?<br><br><strong>A</strong>: Containers are a result of 10 to 15 years of investment in virtualization, so it’s easy to switch from the virtualization world to the containers world —<br>but a container can’t do everything.</p>
<p>This is a very pragmatic argument and he’s right. Containers are a very exciting space right now and there is no doubt that it will be a big part of the future<br>but the community and tooling needs to mature and there is also going to be a very long tail of “traditional” virtualisation technologies around for a very<br>long time yet.</p>
<p><strong>Q</strong>: Are there any plan to integration remote orchestration into Puppet?<br><br><strong>A</strong>: It’s an area we are investing heavily in, and I’m personally investing heavily in. … I’m a big fan of small independent tools that do one job and do it<br>correctly, rather than big huge tools that do a lot. I want to make our orchestration better, not by adding to Puppet, but by adding tools. I don’t want to add<br>more functionality to Puppet, but add functionality to the Puppet ecosystem.</p>
<p>MCollective has been in the puppet eco-system for a while now. It’s going to be getting a lot more attention over the next year so I am very excited to see how<br>this evolves.</p>
<h3 id="Tech-Talks"><a href="#Tech-Talks" class="headerlink" title="Tech Talks"></a>Tech Talks</h3><h4 id="Continuous-Integration-for-Infrastructure-as-Code-Gareth-Rushgrove-Puppet-Labs-Slides"><a href="#Continuous-Integration-for-Infrastructure-as-Code-Gareth-Rushgrove-Puppet-Labs-Slides" class="headerlink" title="Continuous Integration for Infrastructure as Code - Gareth Rushgrove, Puppet Labs - Slides"></a>Continuous Integration for Infrastructure as Code - Gareth Rushgrove, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/continuouslytestinginfrastructure" target="_blank" rel="external">Slides</a></h4><p>Arguable one of the most interesting talks of the conference. This talk took the idea of infrastructure TDD to the next level. What would it be like to be able<br>to test common expectations of your infrastructure (monitoring, backups, machines in each region, budget limitations). There are lots of built-in assumptions<br>that we make about of infrastructure and a lot of business decisions that have been difficult to codify. This talk raising the challenge of providing a complete<br>API for your infrastructure and then testing against it.</p>
<ul>
<li>usual tools (serverspec, wrecker)<ul>
<li>for containers</li>
<li>TDD</li>
</ul>
</li>
<li>Policy Driven development</li>
<li>Infrastructure as an API</li>
<li>common expectations (budget etc)</li>
<li>clojure</li>
<li>can you generate serverspec tests from PuppetDB data??? - yes!</li>
<li>rake test::role::web_server</li>
<li><a href="https://github.com/garethr/serverspec-puppetdb" target="_blank" rel="external">serverspec-puppetdb</a></li>
<li>rspec outputter - monitoring - using it as a bridge</li>
</ul>
<h4 id="Experiences-from-Running-Masterless-Puppet-Erik-Dalen-Spotify-Slides"><a href="#Experiences-from-Running-Masterless-Puppet-Erik-Dalen-Spotify-Slides" class="headerlink" title="Experiences from Running Masterless Puppet - Erik Dalén, Spotify - Slides"></a>Experiences from Running Masterless Puppet - Erik Dalén, Spotify - <a href="http://www.slideshare.net/PuppetLabs/puppetconf-2014-1" target="_blank" rel="external">Slides</a></h4><p>Erik (this years MVP) always has a lot of interesting insights about Puppet from scaling out the infrastructure at Spotify and this talk is no exception.<br>This talk explains their decision to go masterless and the challenges in doing so. It seems that they have put in a lot of work in writing services to manage<br>things like hiera data and managing secrets. It is great to see how this approach scales, one can only hope that future work by PuppetLabs with the Apps project<br>improves this as option for most people.</p>
<ul>
<li>scaling workflow rather than puppet masters</li>
<li>complex modules dependencies make it easy to break things</li>
<li>r10k is still a fixed environment (upgrade apache and progress at the same time)</li>
<li>they use their own tool for secret management</li>
</ul>
<h4 id="Getting-Started-with-Puppet-on-Windows-Josh-Cooper-Puppet-Labs-Slides"><a href="#Getting-Started-with-Puppet-on-Windows-Josh-Cooper-Puppet-Labs-Slides" class="headerlink" title="Getting Started with Puppet on Windows - Josh Cooper, Puppet Labs - Slides"></a>Getting Started with Puppet on Windows - Josh Cooper, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/puppetconf2014-gettingstartedwindowsfinal140925174855phpapp01" target="_blank" rel="external">Slides</a></h4><p>This was a basic introduction to Puppet on windows. It covers what is possible and the many edge cases that you might run into. It was also the time to<br>re-announce the recent support for 64-bit puppet on windows. Thanks to Josh we also got a shout-out for the work we have done with our<br><a href="forge.puppetlabs.com/opentable">forge modules</a></p>
<ul>
<li>Basic intro</li>
<li>powershell, registry_key</li>
<li>installing - mention of 64-bit</li>
<li>puppet resource</li>
<li>supported modules</li>
<li>community modules (inc OT)</li>
<li>geppetto vs VS</li>
<li>problems<ul>
<li>quotes</li>
<li>case sensitivity</li>
<li>UAC</li>
</ul>
</li>
</ul>
<h4 id="Test-Driven-Development-with-Puppet-Gareth-Rushgrove-Puppet-Labs-Slides"><a href="#Test-Driven-Development-with-Puppet-Gareth-Rushgrove-Puppet-Labs-Slides" class="headerlink" title="Test Driven Development with Puppet - Gareth Rushgrove, Puppet Labs - Slides"></a>Test Driven Development with Puppet - Gareth Rushgrove, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/tddforpuppet-39598529" target="_blank" rel="external">Slides</a></h4><p>This is Gareth’s basic introduction to TDD with Puppet. It covers the latest tooling and how to build yourself a recent CI pipeline for your modules so that<br>they are forge-ready. Useful for anyone who is new to the space or who hasn’t released any modules yet.</p>
<ul>
<li>TDD</li>
<li><a href="http://rspec-puppet.com/" target="_blank" rel="external">rspec-puppet</a></li>
<li><a href="http://puppet-lint.com/" target="_blank" rel="external">puppet-lint</a></li>
<li><a href="https://github.com/guard/guard-rspec" target="_blank" rel="external">guard</a></li>
<li><a href="https://github.com/gds-operations/puppet-syntax" target="_blank" rel="external">puppet-syntax</a></li>
<li><a href="https://github.com/puppetlabs/beaker" target="_blank" rel="external">beaker</a> (vagrant + serverspec)</li>
<li><a href="https://travis-ci.org/" target="_blank" rel="external">travis</a></li>
<li><a href="https://github.com/garethr/puppet-module-skeleton" target="_blank" rel="external">puppet module skeleton</a></li>
</ul>
<h4 id="Using-Docker-with-Puppet-James-Turnbull-Kickstarter-Slides"><a href="#Using-Docker-with-Puppet-James-Turnbull-Kickstarter-Slides" class="headerlink" title="Using Docker with Puppet - James Turnbull, Kickstarter - Slides"></a>Using Docker with Puppet - James Turnbull, Kickstarter - <a href="http://www.slideshare.net/PuppetLabs/using-docker-with-puppet-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><p>James gave a good introduction to Docker. Showing off the things that Docker is good at and also detailing some of the things that it isn’t.<br>He also showed how and when to use Puppet in this environment. For anyone moving from a  traditional set-up to a Docker based one then this talk is a must.</p>
<ul>
<li>what is docker</li>
<li>dockerfile</li>
<li>dockerhub</li>
<li>what it does</li>
<li>what it doesn’t<ul>
<li>low-level</li>
<li>resource dependencies</li>
<li>what runs, when</li>
</ul>
</li>
<li>don’t install puppet inside your containers</li>
<li>puppet apply</li>
</ul>
<h4 id="Tools-and-Virtualization-to-Manage-our-Operations-at-Puppet-Labs-Cody-Herriges-Puppet-Labs-Slides"><a href="#Tools-and-Virtualization-to-Manage-our-Operations-at-Puppet-Labs-Cody-Herriges-Puppet-Labs-Slides" class="headerlink" title="Tools and Virtualization to Manage our Operations at Puppet Labs - Cody Herriges, Puppet Labs - Slides"></a>Tools and Virtualization to Manage our Operations at Puppet Labs - Cody Herriges, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/tools-and-virtualization-to-manage-our-operations-at-puppet-labs-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><p>Cody, is a member of the PuppetLabs operations team and wow they seriously have their work cut out for them. They have to manage pretty much every network,<br>vm technology and cloud platform available. This gives some of the challenges in doing that and some of the tools they have built to help them in<br>achieving that.</p>
<ul>
<li>all the VM technologies</li>
<li>all the cloud platforms</li>
<li>all the network providers</li>
<li>automation</li>
<li>monitoring (ELK)</li>
<li>vmpooler (<a href="https://github.com/puppetlabs/vmpooler" target="_blank" rel="external">https://github.com/puppetlabs/vmpooler</a>)</li>
</ul>
<h3 id="Other-Talks"><a href="#Other-Talks" class="headerlink" title="Other Talks"></a>Other Talks</h3><ul>
<li>The Switch as a Server - Leslie Carr, Cumulus Networks - <a href="http://www.slideshare.net/PuppetLabs/the-switch-as-a-server-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Intro to Using MCollective - Devon Peters, Jive Software - <a href="http://www.slideshare.net/PuppetLabs/intro-to-using-mcollective-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>How Puppet Enables the Use of Lightweight Virtualized Containers - Jeff McCune, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/how-puppet-enables-the-use-of-lightweight-virtualized-containers-jeff-mc-cune-puppet-labs" target="_blank" rel="external">Slides</a></li>
<li>Server Locality Using Razor and LLDP - Jonas Rosland, EMC - <a href="http://www.slideshare.net/PuppetLabs/server-locality-withrazorandlldp" target="_blank" rel="external">Slides</a></li>
<li>Node Classifier Fundamentals - Dan Lidral-Porter, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/node-classifier-fundamentals-dan-lidralporter-puppet-lab" target="_blank" rel="external">Slides</a></li>
<li>What’s Next for Puppet Enterprise - Lindsey Smith, Puppet Labs &amp; Susannah Axelrod, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/whats-next-for-puppet-enterprise-and-beyond" target="_blank" rel="external">Slides</a></li>
<li>The DevOps Field Guide to Cognitive Biases (2nd Edition) - Lindsay Holmwood, Bulletproof Networks</li>
<li>Delegated Configuration with Multiple Hiera Databases - Robert Terhaar, Atlantic Dynamic - <a href="http://www.slideshare.net/PuppetLabs/rob-terhaar-puppetconf2014" target="_blank" rel="external">Slides</a></li>
<li>Understanding OpenStack Deployments - Chris Hoge, OpenStack Foundation - <a href="http://www.slideshare.net/PuppetLabs/understanding-openstack-deployments-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Implementing Puppet at a South American Government Agency, Challenges and Solutions - Pablo Wright, Edrans - <a href="http://www.slideshare.net/PuppetLabs/implementing-puppet-at-a-south-american-government-agency-challenges-and-solutions-pablo-wright-edrans" target="_blank" rel="external">Slides</a></li>
<li>Infrastructure as Software - Dustin J. Mitchell, Mozilla, Inc. - <a href="http://www.slideshare.net/PuppetLabs/infrastructure-as-software-dustin-j-mitchell-mozilla-inc?" target="_blank" rel="external">Slides</a></li>
<li>Dev to Delivery with Puppet - Sam Bashton, Bashton Ltd. - <a href="http://www.slideshare.net/PuppetLabs/dev-to-delivery-with-puppet-sam-bashton-bashton-ltd" target="_blank" rel="external">Slides</a></li>
<li>Get Puppet Enterprise into Your Company - Iko Saadhoff, KPN</li>
<li>The Puppet Master on the JVM - Chris Price, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/the-puppet-master-on-the-jvm-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>The Grand Puppet Sub-Systems Tour - Nicholas Fagerlund, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/the-grand-puppet-subsystems-tour-nicholas-fagerlund-puppet-labs" target="_blank" rel="external">Slides</a></li>
<li>Building Community: One Puppet Module at a Time - Diane Mueller, Red Hat &amp; Diego Castro, Getup Cloud</li>
<li>Puppet for Everybody! - Federated and Hierarchical Puppet Enterprise - Chris Bowles, University of Texas at Austin - <a href="http://www.slideshare.net/PuppetLabs/puppet-for-everybody-federated-and-hierarchical-puppet-enterprise-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Puppetizing Multitier Architecture - Reid Vandewiele, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/puppetizing-multitier-architecture-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>The Evolving Design Patterns of Puppet Enterprise - Jonathan Spinks, Sourced Group &amp; John Painter, Sourced Group - <a href="http://www.slideshare.net/PuppetLabs/the-evolving-design-patterns-of-puppet-enterprise-jonathan-spinks-sourced-group-john-painter-sourced-group" target="_blank" rel="external">Slides</a></li>
<li>From Development to Testing to Deployment with Puppet Enterprise and Microsoft Azure - Ross Gardler, Microsoft Open Technologies, Inc. - <a href="http://www.slideshare.net/PuppetLabs/from-development-to-testing-to-deployment-with-puppet-enterprise-and-microsoft-azure-ross-gardler-microsoft-open-technologies-inc" target="_blank" rel="external">Slides</a></li>
<li>Exploring the Final Frontier of Data Center Orchestration: Network Elements - Jason Pfeifer, Cisco - <a href="http://www.slideshare.net/PuppetLabs/puppetconf-cisco" target="_blank" rel="external">Slides</a></li>
<li>An In-Depth Introduction to the Puppet Enterprise Console - Ruth Linehan, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/an-indepth-introduction-to-the-puppet-enterprise-console-ruth-linehan-puppet-labs" target="_blank" rel="external">Slides</a></li>
<li>Packaging Software, Puppet Labs Style - Melissa Stone, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/packaging-software-puppet-labs-style-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Orchestrated Functional Testing with Puppet-spec and Mspectator - Raphaël Pinson, Camptocamp - <a href="http://www.slideshare.net/PuppetLabs/puppetconf-mspectator-talk" target="_blank" rel="external">Slides</a></li>
<li>Fully Automate Application Delivery with Puppet and F5 - Colin Walker, F5 - <a href="http://www.slideshare.net/PuppetLabs/i-control-rest-presentation-for-puppet" target="_blank" rel="external">Slides</a></li>
<li>Managing the File and Exposing the API - Christopher Webber, Chef Software</li>
<li>Case Study: Developing a Vblock Systems Based Private Cloud Platform with Puppet and VMware vCloud Suite - Peng Liu &amp; Paul Harb, VCE - <a href="http://www.slideshare.net/VCE_Computing/puppet-confvce-preso20140925" target="_blank" rel="external">Slides</a></li>
<li>Got Logs? Get Answers with Elasticsearch ELK - Jordan Sissel, Elasticsearch - <a href="http://www.slideshare.net/PuppetLabs/got-logs-get-answers-with-elasticsearch-elk-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Managing Network Security Monitoring at Large Scale with Puppet - Michael Pananen &amp; Chris Nyhuis, Vigilant Technology Services - <a href="http://www.slideshare.net/PuppetLabs/managing-network-security-monitoring-at-large-scale-with-puppet-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Building and Testing from Scratch a Puppet Environment with Docker - Carla Souza, Reliant - <a href="http://www.slideshare.net/PuppetLabs/puppet-conf2014" target="_blank" rel="external">Slides</a></li>
</ul>
<h3 id="Other-Interesting-Links"><a href="#Other-Interesting-Links" class="headerlink" title="Other Interesting Links"></a>Other Interesting Links</h3><ul>
<li><a href="http://blog.superk.org/2014/09/puppet-conf-2014-review.html" target="_blank" rel="external">http://blog.superk.org/2014/09/puppet-conf-2014-review.html</a></li>
<li><a href="http://www.olindata.com/blog/2014/09/first-impressions-new-cfacter" target="_blank" rel="external">http://www.olindata.com/blog/2014/09/first-impressions-new-cfacter</a></li>
<li><a href="http://cwebber.net/blog/2014/09/26/i-am-not-a-coder/" target="_blank" rel="external">http://cwebber.net/blog/2014/09/26/i-am-not-a-coder/</a></li>
<li><a href="http://www.slideshare.net/PuppetLabs/tag/puppetconf-2014" target="_blank" rel="external">http://www.slideshare.net/PuppetLabs/tag/puppetconf-2014</a></li>
<li><a href="http://puppetlabs.com/blog/puppetconf-2014-day-1-tips-treats-and-tweets" target="_blank" rel="external">http://puppetlabs.com/blog/puppetconf-2014-day-1-tips-treats-and-tweets</a></li>
<li><a href="http://puppetlabs.com/blog/puppetconf-2014-day-2-luke-q-and-a-devops-containers-and-more" target="_blank" rel="external">http://puppetlabs.com/blog/puppetconf-2014-day-2-luke-q-and-a-devops-containers-and-more</a></li>
<li><a href="http://puppetlabs.com/blog/puppetconf-2014-day-1-tips-treats-and-tweets" target="_blank" rel="external">http://puppetlabs.com/blog/puppetconf-2014-day-1-tips-treats-and-tweets</a></li>
<li><a href="http://puppetlabs.com/blog/puppet-conf-2014-wrap-up" target="_blank" rel="external">http://puppetlabs.com/blog/puppet-conf-2014-wrap-up</a></li>
<li><a href="https://forge.puppetlabs.com/approved/criteria" target="_blank" rel="external">https://forge.puppetlabs.com/approved/criteria</a></li>
<li><a href="http://puppetlabs.com/blog/puppet-server-bringing-soa-to-a-puppet-master-near-you" target="_blank" rel="external">http://puppetlabs.com/blog/puppet-server-bringing-soa-to-a-puppet-master-near-you</a></li>
<li><a href="https://github.com/puppetlabs/puppetlabs-strings/" target="_blank" rel="external">https://github.com/puppetlabs/puppetlabs-strings/</a></li>
<li><a href="http://bitergia.dev.puppetlabs.com/browser/" target="_blank" rel="external">http://bitergia.dev.puppetlabs.com/browser/</a></li>
<li><a href="https://www.flickr.com/photos/pleia2/sets/72157648049231891" target="_blank" rel="external">https://www.flickr.com/photos/pleia2/sets/72157648049231891/</a></li>
<li><a href="http://theshipshow.com/2014/10/the-pulse-of-puppetconf-2014/" target="_blank" rel="external">http://theshipshow.com/2014/10/the-pulse-of-puppetconf-2014/</a></li>
<li><a href="http://www.theregister.co.uk/2014/09/23/puppetconf_2014_keynote/" target="_blank" rel="external">http://www.theregister.co.uk/2014/09/23/puppetconf_2014_keynote/</a></li>
<li><a href="http://www.infoq.com/news/2014/09/puppet-approved-modules" target="_blank" rel="external">http://www.infoq.com/news/2014/09/puppet-approved-modules</a></li>
<li><a href="https://github.com/ferventcoder/puppet-chocolatey-presentation" target="_blank" rel="external">https://github.com/ferventcoder/puppet-chocolatey-presentation</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day-2&quot;&gt;&lt;a href=&quot;#Day-2&quot; class=&quot;headerlink&quot; title=&quot;Day 2&quot;&gt;&lt;/a&gt;Day 2&lt;/h2&gt;&lt;p&gt;This is our summary of PuppetConf 2014. In our &lt;a href=&quot;/blog/2014/10/06/puppetconf-2014-part-2/&quot;&gt;previous post&lt;/a&gt; we gave an overview of the first day of the conference. This post will provide an&lt;br&gt;overview of the final day.&lt;/p&gt;
&lt;p&gt;There were even more inspiring keynotes and lots more talks which have given us plenty of ideas to go home and think about.&lt;/p&gt;
&lt;h3 id=&quot;Key-Notes&quot;&gt;&lt;a href=&quot;#Key-Notes&quot; class=&quot;headerlink&quot; title=&quot;Key Notes&quot;&gt;&lt;/a&gt;Key Notes&lt;/h3&gt;&lt;h4 id=&quot;Animating-the-Puppet-Creating-a-Culture-of-Puppet-Adoption-Dan-Spurling-spurling-Getty-Images-Slides&quot;&gt;&lt;a href=&quot;#Animating-the-Puppet-Creating-a-Culture-of-Puppet-Adoption-Dan-Spurling-spurling-Getty-Images-Slides&quot; class=&quot;headerlink&quot; title=&quot;Animating the Puppet: Creating a Culture of Puppet Adoption - Dan Spurling (@spurling), Getty Images - Slides&quot;&gt;&lt;/a&gt;Animating the Puppet: Creating a Culture of Puppet Adoption - Dan Spurling (&lt;a href=&quot;https://twitter.com/spurling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@spurling&lt;/a&gt;), Getty Images - &lt;a href=&quot;http://www.slideshare.net/PuppetLabs/keynote-animating-the-puppet-creating-a-culture-of-puppet-adoption-puppetconf-2014&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Slides&lt;/a&gt;&lt;/h4&gt;&lt;div style=&quot;float:right;margin:0 10px 10px 10px;width:50%&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/posts/puppetconf-dan.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;


&lt;p&gt;Dan Spuring, VP of Tech Services at Getty came out of the gate with a strong message. His &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=GSD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GSD&lt;/a&gt; t-shirt&lt;br&gt;giving you a clear understanding of who he is. His talk about creating a culture of Puppet adoption at his company was a great story of how challenging it&lt;br&gt;can be to move various business units with projects of various ages to a configuration-management (with Puppet) ethos.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Puppet" scheme="http://tech.opentable.co.uk/blog/categories/Puppet/"/>
    
      <category term="Conferences" scheme="http://tech.opentable.co.uk/blog/categories/Conferences/"/>
    
      <category term="PuppetConf 2014" scheme="http://tech.opentable.co.uk/blog/categories/PuppetConf-2014/"/>
    
  </entry>
  
  <entry>
    <title>PuppetConf 2014 - Part 2</title>
    <link href="http://tech.opentable.co.uk//blog/2014/10/06/puppetconf-2014-part-2/"/>
    <id>http://tech.opentable.co.uk//blog/2014/10/06/puppetconf-2014-part-2/</id>
    <published>2014-10-06T12:30:58.000Z</published>
    <updated>2016-10-24T10:26:16.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>This is our summary of PuppetConf 2014. In our <a href="/blog/2014/10/06/puppetconf-2014-part-1/">previous post</a> we gave an overview of the contributor summit. This post will provide an overview<br>of the first day of PuppetConf.</p>
<p>As you might expect there were great keynotes with plenty of announcements and too many talks for us to attend. We have provided an outline for all the talks<br>we did attend and links to those we didn’t.</p>
<h3 id="KeyNotes"><a href="#KeyNotes" class="headerlink" title="KeyNotes"></a>KeyNotes</h3><h4 id="Nearly-a-Decade-of-Puppet-What-We’ve-Learned-and-Where-We’re-Going-Next-Luke-Kanies-PuppetLabs-Slides"><a href="#Nearly-a-Decade-of-Puppet-What-We’ve-Learned-and-Where-We’re-Going-Next-Luke-Kanies-PuppetLabs-Slides" class="headerlink" title="Nearly a Decade of Puppet: What We’ve Learned and Where We’re Going Next - Luke Kanies, PuppetLabs - Slides"></a>Nearly a Decade of Puppet: What We’ve Learned and Where We’re Going Next - Luke Kanies, PuppetLabs - <a href="http://www.slideshare.net/PuppetLabs/luke-kanies-keynote-nearly-a-decade-of-puppet-what-weve-learned-and-where-were-going-next-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><div style="float:right;margin:0 10px 10px 10px;width:50%"><br>  <img src="/images/posts/puppetconf-luke-1.jpg"><br></div>

<p>The big keynote of the event to kick off the first day from the author of Puppet himself. This was obviously going to be a tweet worthy affair full of photos<br>and big announcements and it did not disappoint.</p>
<p>Native Clients (CFactor + C++ rewrite of agents) are coming in the very near future. This is not only a matter of improving the performance for existing users part<br>of philosophy of PuppetLabs to become ubiquitous across as many devices and platforms as possible. This is one of those improvements that is really setting up<br>PuppetLabs for the future.</p>
<p>Puppet Server (a.k.a the Clojure rewrite). This is PuppetLabs big move away from Ruby on onto the JVM. Being on the JVM means they can slowly rewrite the<br>codebase while also maintaining compatibility thanks to JRuby. They have gained a lot of experience with Clojure thanks to the PuppetDB &amp; TrapKeeper projects and given how<br>successful that project has been it has helped ease many of the fears people have in moving the JVM. Puppet Server is also a self contained application so there<br>is no longer any need to worry about the whole apache/passanger yak shave. There was even a demo on the metrics that are now exposed by Puppet Server - yes<br>you can now plug Puppet into graphite.</p>
<p>There have been plenty of follow-ups on this that you might be interested in reading:</p>
<ul>
<li><a href="http://www.infoworld.com/article/2687553/devops/puppet-server-drops-ruby-for-clojure.html" target="_blank" rel="external">http://www.infoworld.com/article/2687553/devops/puppet-server-drops-ruby-for-clojure.html</a></li>
<li><a href="http://puppetlabs.com/blog/puppet-server-bringing-soa-to-a-puppet-master-near-you" target="_blank" rel="external">http://puppetlabs.com/blog/puppet-server-bringing-soa-to-a-puppet-master-near-you</a></li>
<li><a href="http://puppetlabs.com/blog/new-era-application-services-puppet-labs" target="_blank" rel="external">http://puppetlabs.com/blog/new-era-application-services-puppet-labs</a></li>
<li><a href="https://github.com/puppetlabs/puppet-server" target="_blank" rel="external">https://github.com/puppetlabs/puppet-server</a></li>
<li><a href="http://www.informationweek.com/cloud/software-as-a-service/puppet-servers-big-revamp/d/d-id/1315934" target="_blank" rel="external">http://www.informationweek.com/cloud/software-as-a-service/puppet-servers-big-revamp/d/d-id/1315934</a></li>
</ul>
<p>Puppet Apps was the next big announcement. Puppet Apps is actually a fantastic piece of marketing around the idea that they are refactoring to a more micro-services<br>style approach - splitting up the monolith that is currently the Puppet master into smaller applications that have their own release cadence and can be scaled<br>separately.</p>
<p>The first announcement from the “Apps” initiative is Puppet Node Manager the new node classifier which will roll out in the Q1 of 2015 as an add-on<br>to Puppet Enterprise. Given that Puppet has allowed external node classifiers to be written for a long time now (and there are many open source ones out there)<br>it is good to see PuppetLabs stepping up and trying to own this more and improve the experience.</p>
<p><a href="http://puppetlabs.com/about/press-releases/puppet-labs-kicks-puppetconf-announcements-major-updates-industrys-most-popular" target="_blank" rel="external">http://puppetlabs.com/about/press-releases/puppet-labs-kicks-puppetconf-announcements-major-updates-industrys-most-popular</a></p>
<p>Another huge announcement (of which we got a preview at the contributors summit) was Puppet Approved Modules. Luke and the rest of PuppetLabs have the huge<br>idea that 80% of what you’re going to want to configure on your systems should be possible with what is available on the forge. Some of the bigger pieces have<br>been covered by the module engineers at PuppetLabs under the existing Puppet Support Modules program. This has been fantastic in driving for consensus around<br>configuration making installation of certain products (like apache) easier for people.</p>
<p>The reality is that if PuppetLabs want to achieve its 80% goal they are are not going to be able to do that with the engineers and resources they have<br>available to them. Nor do they have the expertise to know about all the software out there. This is where the Puppet Approved program comes in. Its aim is to<br>provide the same standard of quality that you see in the Supported modules but for modules written by the community. It is easy for users of the forge to<br>be able to pick out high quality, actively maintained modules and know what they are getting. As a user this is very exciting and as a module author, while<br>there will be plenty of work for me to do, I am glad that the community is moving in this direction.</p>
<p>Speaking of the community, Luke used this opportunity to announce the finalists and the winner of the Most Valued Puppetier (MVP) competition.</p>
<p>Finalists:</p>
<ul>
<li>Daniele Sluijters (<a href="https://twitter.com/daenney" target="_blank" rel="external">@daenney</a>)</li>
<li>Felix Frank</li>
<li>Tim Sharp (<a href="https://twitter.com/rodjek" target="_blank" rel="external">@rodjek</a>)</li>
</ul>
<p>Winner</p>
<ul>
<li>Erik Dalén (<a href="(https://twitter.com/erik_dalen">@erik_dalen</a>)</li>
</ul>
<p>The last part of the keynote was talking about some of the wider thoughts as we look to the next ten years of Puppet and what comes next. There is going to be<br>more focus on the ubiquity of Puppet, on devices more network device partners and solving problems like orchestration. The next ten years is going to be about<br>taking Puppet beyond the single node. We are already thinking of machines as cattle and not pets - Puppet should also better reflect that change.</p>
<p>I for one am very excited by all this and look forward to seeing what comes out over the next few years.</p>
<h4 id="The-Phoenix-Project-Lessons-Learned-Gene-Kim-IT-Revolution-Press-Slides"><a href="#The-Phoenix-Project-Lessons-Learned-Gene-Kim-IT-Revolution-Press-Slides" class="headerlink" title="The Phoenix Project: Lessons Learned - Gene Kim, IT Revolution Press - Slides"></a>The Phoenix Project: Lessons Learned - Gene Kim, IT Revolution Press - <a href="http://www.slideshare.net/PuppetLabs/keynote-the-phoenix-project-lessons-learned-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><div style="float:right;margin:0 10px 10px 10px;width:50%"><br>  <img src="/images/posts/puppetconf-gene.jpg"><br></div>

<p>This was a great overview of Gene’s research of DevOps and how that intersects with high performing organisations. There were many interesting results that came<br>out the the survey that he did in joint co-operation with PuppetLabs many of which he shared during this talk.</p>
<p>I think the one that stands out and often tweeted is the following:</p>
<p><em>“High performers have 30x more deployments and 8000x faster lead time, 2x the change success rate and 12x faster recovery”</em></p>
<p>Read that again - wow.</p>
<p>This talk as one might expect was all about DevOps, its history, why and how it works. Even if you’re fully familiar with the whole culture of DevOps there are<br>plenty of things to be learnt from this keynote and I look forward to re-watching it when the video lands on YouTube.</p>
<h4 id="Trust-Me-Kate-Matsudaira-Popforms-Slides"><a href="#Trust-Me-Kate-Matsudaira-Popforms-Slides" class="headerlink" title="Trust Me - Kate Matsudaira, Popforms - Slides"></a>Trust Me - Kate Matsudaira, Popforms - <a href="http://www.slideshare.net/PuppetLabs/keynote-trust-me-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><div style="float:right;margin:0 10px 10px 10px;width:50%"><br>  <img src="/images/posts/puppetconf-kate.jpg"><br></div>

<p>Following the theme of culture, Kate’s talk was a refreshing look at the culture of trust within an organisation. Far from being the usual “this is what my<br>company culture looks like” sort-of talk, this talk had a lot of practical advice. Discussion of how to build relationships, how to raise your profile within<br>the organisation and how to improve yourself as a manger. “If you use your 1-on-1 to talk about status, you’re wasting time. Get to know your boss, solicit<br>feedback on your performance.” - Great advice like this is littered throughout the talk.</p>
<p>She says that trust is like money and that you need to be wise in how you spend that trust. Most organisations are not a meritocracy and we need to stop thinking that they are. Your relationships within the organisation are just as important as the quality of the work that you do.  There needs to be balance between these two things - are your relationships as good as the work that you do?</p>
<p>If you want to improve yourself and advance your career, either as an engineer or as a manager then you should absolutely take the time to listen to this talk.</p>
<p><strong>Bonus</strong>: the slides rock! (I won’t spoilt it - take a look)</p>
<h3 id="Track-Talks"><a href="#Track-Talks" class="headerlink" title="Track Talks"></a>Track Talks</h3><h4 id="The-Puppet-Debugging-Kit-Building-Blocks-for-Exploration-and-Problem-Solving-Charlie-Sharpsteen-Puppet-Labs-csharpsteen-Slides"><a href="#The-Puppet-Debugging-Kit-Building-Blocks-for-Exploration-and-Problem-Solving-Charlie-Sharpsteen-Puppet-Labs-csharpsteen-Slides" class="headerlink" title="The Puppet Debugging Kit: Building Blocks for Exploration and Problem Solving - Charlie Sharpsteen, Puppet Labs (@csharpsteen) - Slides"></a>The Puppet Debugging Kit: Building Blocks for Exploration and Problem Solving - Charlie Sharpsteen, Puppet Labs (<a href="https://twitter.com/csharpsteen" target="_blank" rel="external">@csharpsteen</a>) - <a href="http://www.slideshare.net/PuppetLabs/the-puppet-debugging-kit-building-blocks-for-exploration-and-problem-solving-charlie-sharpsteen-puppet-labs" target="_blank" rel="external">Slides</a></h4><p>Interesting tool, has some cross-over with the Beaker testing tool. PDK is more for focused manual testing rather than automated acceptance tests.</p>
<ul>
<li><a href="https://github.com/Sharpie/puppet-debugging-kit" target="_blank" rel="external">https://github.com/Sharpie/puppet-debugging-kit</a></li>
<li>vagrant + oscar (<a href="https://github.com/adrienthebo/oscar" target="_blank" rel="external">https://github.com/adrienthebo/oscar</a>)</li>
<li>oscar is a collection of vagrant plugins</li>
<li>vagrant-config_builder -&gt; adds role to share vagrant config  (similar to the beaker nodeset file)</li>
<li>PDK is a set of oscar roles</li>
<li>facter / hiera and Puppet running off GitHub</li>
<li>beaker vs oscar - oscar is optimised for manual testing. There is room to share stuff here.</li>
</ul>
<h4 id="Cloudy-with-a-Chance-of-Fireballs-Provisioning-and-Certificate-Management-in-Puppet-Eric-Sorenson-ahpook-Puppet-Labs-Slides"><a href="#Cloudy-with-a-Chance-of-Fireballs-Provisioning-and-Certificate-Management-in-Puppet-Eric-Sorenson-ahpook-Puppet-Labs-Slides" class="headerlink" title="Cloudy with a Chance of Fireballs: Provisioning and Certificate Management in Puppet - Eric Sorenson (@ahpook), Puppet Labs - Slides"></a>Cloudy with a Chance of Fireballs: Provisioning and Certificate Management in Puppet - Eric Sorenson (<a href="https://twitter.com/ahpook" target="_blank" rel="external">@ahpook</a>), Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/sorenson-fireballspuppet-conf2014" target="_blank" rel="external">Slides</a></h4><ul>
<li>Apple iCloud uses Puppet + autosign</li>
<li>auto sign doesn’t work very well for the cloud</li>
<li>Amazon IAM can be applied by machines - IAM so instance can read it’s own tags (if it has ec2-client-utils installed)</li>
<li>puts instance_id, ami_id and role into /etc/puppet/csr_attriubutes.yaml</li>
<li>can validate the metadata in the cert using x509</li>
<li>true_node_data = true &amp; immutable_node_data = true</li>
<li>closes security hole of setting certname to fact on agent</li>
</ul>
<h4 id="Beaker-Automated-Cloud-Based-Acceptance-Testing-Alice-Nodelman-alicenode-Puppet-Labs-Slides"><a href="#Beaker-Automated-Cloud-Based-Acceptance-Testing-Alice-Nodelman-alicenode-Puppet-Labs-Slides" class="headerlink" title="Beaker: Automated, Cloud-Based Acceptance Testing - Alice Nodelman (@alicenode), Puppet Labs - Slides"></a>Beaker: Automated, Cloud-Based Acceptance Testing - Alice Nodelman (<a href="https://twitter.com/alicenode" target="_blank" rel="external">@alicenode</a>), Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/beaker-automated-cloudbased-acceptance-testing-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><p>Having contributed to this tool, I was a little bias in attending this talk. Still plenty of interesting new things that came up though.<br>If you haven’t heard of beaker yet you will also be interested in our <a href="/blog/2014/04/04/testing-puppet-with-beaker/">previous blog post</a>.</p>
<ul>
<li>basic introduction to what beaker is and how to use it.</li>
<li>rspec vs test dsl - both are still supported methods of writing tests.</li>
<li>junit export - useful when integrating with Jenkins</li>
<li><code>on host as</code> - is a feature that is coming soon so that you can run a command on a host with a given user account</li>
</ul>
<h4 id="Puppet-Language-4-0-Henrik-Lindberg-hel-Puppet-Labs-Slides"><a href="#Puppet-Language-4-0-Henrik-Lindberg-hel-Puppet-Labs-Slides" class="headerlink" title="Puppet Language 4.0 - Henrik Lindberg (@hel), Puppet Labs  - Slides"></a>Puppet Language 4.0 - Henrik Lindberg (<a href="https://twitter.com/hel" target="_blank" rel="external">@hel</a>), Puppet Labs  - <a href="http://www.slideshare.net/PuppetLabs/puppet-language-40-puppetconf-2014" target="_blank" rel="external">Slides</a></h4><p>Lots and lots of interesting information here about the new Puppet 4 syntax and jokes about some of the terrible edge cases of the past. It is good to<br>know now that with Puppet 4 there is a formal specification for the language so we should no longer see these sorts of weird edge cases of the past.<br>There are also lots of new features in the language: some to deal with long standing pain points (interation), some to help in the move away from ruby<br>(Puppet templates) and some to prevent authors themselves writing buggy manifests (the type system). Puppet 4 is going to be an exciting this to use.</p>
<ul>
<li>pain-points / cleanup (specification)<ul>
<li>numbers are numbers (and not strings)</li>
<li>Type references</li>
</ul>
</li>
<li>heredoc</li>
<li>Puppet templates</li>
<li>iteration (each, map, filter, reduce, slice, with)</li>
<li>local defaults</li>
<li>Type system</li>
</ul>
<h4 id="7-Puppet-Horror-Stories-in-7-Years-Kris-Buytaert-KrisBuytaert-Inuits-Slides"><a href="#7-Puppet-Horror-Stories-in-7-Years-Kris-Buytaert-KrisBuytaert-Inuits-Slides" class="headerlink" title="7 Puppet Horror Stories in 7 Years - Kris Buytaert (@KrisBuytaert), Inuits - Slides"></a>7 Puppet Horror Stories in 7 Years - Kris Buytaert (<a href="https://twitter.com/KrisBuytaert" target="_blank" rel="external">@KrisBuytaert</a>), Inuits - <a href="http://www.slideshare.net/KrisBuytaert/7-years-of-puppet-horror-stories" target="_blank" rel="external">Slides</a></h4><p>This was more of an interactive talk, trying to get members of the audience to try and predict what the actual problem was. For more senior Puppetiers<br>this was a fun talk, reminding us of the challenges many of us have faced. For newer Puppet developers this was likely acting as a good warning and<br>foreshadowing of things that may arise if your not careful (or are very unlucky).</p>
<ul>
<li>SSL</li>
<li>Full Disk</li>
<li>Puppet Bugs</li>
<li>DNS (everything is a DNS problem)</li>
</ul>
<h4 id="Killer-R10K-Workflow-Phil-Zimmerman-phil-zimmerman-Time-Warner-Cable-Slides"><a href="#Killer-R10K-Workflow-Phil-Zimmerman-phil-zimmerman-Time-Warner-Cable-Slides" class="headerlink" title="Killer R10K Workflow - Phil Zimmerman (@phil_zimmerman), Time Warner Cable - Slides"></a>Killer R10K Workflow - Phil Zimmerman (<a href="https://twitter.com/phil_zimmerman" target="_blank" rel="external">@phil_zimmerman</a>), Time Warner Cable - <a href="http://www.slideshare.net/PuppetLabs/killer-r10k-39571913" target="_blank" rel="external">Slides</a></h4><p>This was a good introduction to r10k and the reasons you would want to use it. The workflow is pretty straightforward and I think that for anyone managing Puppet at scale this is going to be something to look at.</p>
<ul>
<li>some good use cases for r10k<ul>
<li>upgrading modules</li>
<li>not having to wait for all role tests to run</li>
<li>deploying everything to all masters (even hiera)</li>
</ul>
</li>
<li>workflow<ul>
<li>ci per module</li>
<li>release job per module (tags)</li>
<li>deploy job per module (cap task to wrap r10k for masters/nodes)</li>
</ul>
</li>
</ul>
<h3 id="Other-Talks-from-the-Day"><a href="#Other-Talks-from-the-Day" class="headerlink" title="Other Talks from the Day"></a>Other Talks from the Day</h3><ul>
<li>Infrastructure-as-Code with Puppet Enterprise in the Cloud - Evan Scheessele, HP - <a href="http://www.slideshare.net/PuppetLabs/infrastructure-ascode-with-puppet-enterprise-in-the-cloud-evan-scheessele-hp" target="_blank" rel="external">Slides</a></li>
<li>Getting Started with Puppet - Michael Stahnke, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/getting-started-with-puppet-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Plan, Deploy &amp; Manage Modern Applications Leveraging vCloud Automation Center and Puppet - Pradnesh Patil, VMware - <a href="http://www.slideshare.net/PuppetLabs/plan-deploy-manage-modern-applications-leveraging-vcloud-automation-center-and-puppet-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Writing and Publishing Puppet Modules - Colleen Murphy, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/writing-and-publishing-puppet-modules-colleen-murphy-puppet-labs" target="_blank" rel="external">Slides</a></li>
<li>To the Future! - Goals for Puppet 4 - Andrew Parker, Puppet Labs &amp; Kylo Ginsberg, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/to-the-future-goals-for-puppet-and-facter-1" target="_blank" rel="external">Slides</a></li>
<li>Managing and Scaling Puppet - Miguel Zuniga, Symantec - <a href="http://www.slideshare.net/PuppetLabs/managing-and-scaling-puppet-puppetconf-2014-39542923" target="_blank" rel="external">Slides</a></li>
<li>What Developers and Operations Can Learn from Design: 6 Ways to Work Better Together - Ashley Hathaway, IBM Watson - <a href="http://www.slideshare.net/PuppetLabs/what-developers-and-operations-can-learn-from-design-6-ways-to-work-better-together-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Performance Tuning Your Puppet Infrastructure - Nic Benders, New Relic - <a href="http://www.slideshare.net/PuppetLabs/performance-tuning-your-puppet-infrastructure-nic-benders-new-relic" target="_blank" rel="external">Slides</a></li>
<li>“Sensu and Sensibility” - The Story of a Journey From #monitoringsucks to #monitoringlove - Tomas Doran, Yelp - <a href="http://www.slideshare.net/PuppetLabs/130pm-210pm-tomas-doran-track-1-puppetconf2014-sensu" target="_blank" rel="external">Slides</a></li>
<li>DevOps Means Business - Gene Kim, IT Revolution Press &amp; Nicole Forsgren Velasquez, Utah State University - <a href="http://www.slideshare.net/PuppetLabs/devops-means-business-gene-kim-it-revolution-press-nicole-forsgren-velasquez-utah-state-university" target="_blank" rel="external">Slides</a></li>
<li>Auditing/Security with Puppet - Robert Maury, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/auditingsecurity-with-puppet-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Absolute Beginners Guide to Puppet Through Types - Igor Galić, Brainsware OG - <a href="http://www.slideshare.net/PuppetLabs/absolute-beginners-guide-to-puppet-through-types-igor-galic-brainsware-og" target="_blank" rel="external">Slides</a></li>
<li>Plugging Chocolatey into Your Puppet Infrastructure - Rob Reynolds, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/plugging-chocolatey-into-your-puppet-infrastructure-rob-reynolds-puppet-labs" target="_blank" rel="external">Slides</a></li>
<li>PuppetDB: One Year Faster - Deepak Giridharagopal, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>The Puppet Community: Current State and Future Plans - Dawn Foster, Puppet Labs &amp; Kara Sowles, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/the-puppet-community-current-state-and-future-plans-dawn-foster-puppet-labs-kara-sowles-puppet-labs" target="_blank" rel="external">Slides</a></li>
<li>Continuous Delivery of Puppet-Based Infrastructure - Sam Kottler, Digital Ocean - <a href="http://www.slideshare.net/PuppetLabs/continuous-delivery-of-puppetbased-infrastructure-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>The Seven Habits of Highly Effective Puppet Users - David Danzilio, Constant Contact - <a href="http://www.slideshare.net/PuppetLabs/the-seven-habits-of-highly-effective-puppet-users-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Fact-Based Monitoring - Alexis Le-Quoc, Datadog - <a href="http://www.slideshare.net/PuppetLabs/fact-based-monitoring-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>Test-Driven Puppet Development - Nan Liu, Bodeco - <a href="http://www.slideshare.net/PuppetLabs/testdriven-puppet-development-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>A Practical Guide to Modules - Lauren Rother, Puppet Labs &amp; Morgan Haskel, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/a-practical-guide-to-modules-lauren-rother-puppet-labs-morgan-haskel-puppet-labs" target="_blank" rel="external">Slides</a></li>
<li>Leveraging the PuppetDB API: Puppetboard - Daniele Sluijters, Nedap</li>
<li>Puppet Availability and Performance at 100K Nodes - John Jawed, eBay/PayPal - <a href="http://www.slideshare.net/PuppetLabs/puppet-availability-and-performance-at-100k-nodes-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>DevOps and Software Defined Networking - John Willis, Pacific Crest</li>
<li>Razor, the Provisioning Toolbox - David Lutterkort, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/razor-the-provisioning-toolbox-puppetconf-2014" target="_blank" rel="external">Slides</a></li>
<li>How to Puppetize Google Cloud Platform - Katharina Probst, Google, Matt Bookman, Google &amp; Ryan Coleman, Puppet Labs - <a href="http://www.slideshare.net/PuppetLabs/how-to-puppetize-google-cloud-platform-katharina-e" target="_blank" rel="external">Slides</a></li>
<li>Continuous Infrastructure: Modern Puppet for the Jenkins Project - R.Tyler Croy, Jenkins - <a href="http://www.slideshare.net/PuppetLabs/continuous-infrastructure-modern-puppet-for-the-jenkins-project-rtyler-croy-jenkins" target="_blank" rel="external">Slides</a></li>
<li>How to Measure Everything: A Million Metrics Per Second with Minimal Developer Overhead - Jos Boumans, Krux - <a href="http://www.slideshare.net/PuppetLabs/how-to-measure-everything-a-million-metrics-per-second-with-minimal-developer-overhead-puppetco" target="_blank" rel="external">Slides</a></li>
<li>How to Open Source Your Puppet Configuration - Elizabeth Krumbach Joseph, HP - <a href="http://www.slideshare.net/PuppetLabs/how-to-open-source-your-puppet-configuration-elizabeth-krumbach-joseph-hp" target="_blank" rel="external">Slides</a></li>
<li>Manageable Puppet Infrastructure - Ger Apeldoorn, Freelance Puppet Consultant - <a href="http://www.slideshare.net/PuppetLabs/manageable-puppet-infrastructure-ger-apeldoorn-freelance-puppet-consultant" target="_blank" rel="external">Slides</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;p&gt;This is our summary of PuppetConf 2014. In our &lt;a href=&quot;/blog/2014/10/06/puppetconf-2014-part-1/&quot;&gt;previous post&lt;/a&gt; we gave an overview of the contributor summit. This post will provide an overview&lt;br&gt;of the first day of PuppetConf.&lt;/p&gt;
&lt;p&gt;As you might expect there were great keynotes with plenty of announcements and too many talks for us to attend. We have provided an outline for all the talks&lt;br&gt;we did attend and links to those we didn’t.&lt;/p&gt;
&lt;h3 id=&quot;KeyNotes&quot;&gt;&lt;a href=&quot;#KeyNotes&quot; class=&quot;headerlink&quot; title=&quot;KeyNotes&quot;&gt;&lt;/a&gt;KeyNotes&lt;/h3&gt;&lt;h4 id=&quot;Nearly-a-Decade-of-Puppet-What-We’ve-Learned-and-Where-We’re-Going-Next-Luke-Kanies-PuppetLabs-Slides&quot;&gt;&lt;a href=&quot;#Nearly-a-Decade-of-Puppet-What-We’ve-Learned-and-Where-We’re-Going-Next-Luke-Kanies-PuppetLabs-Slides&quot; class=&quot;headerlink&quot; title=&quot;Nearly a Decade of Puppet: What We’ve Learned and Where We’re Going Next - Luke Kanies, PuppetLabs - Slides&quot;&gt;&lt;/a&gt;Nearly a Decade of Puppet: What We’ve Learned and Where We’re Going Next - Luke Kanies, PuppetLabs - &lt;a href=&quot;http://www.slideshare.net/PuppetLabs/luke-kanies-keynote-nearly-a-decade-of-puppet-what-weve-learned-and-where-were-going-next-puppetconf-2014&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Slides&lt;/a&gt;&lt;/h4&gt;&lt;div style=&quot;float:right;margin:0 10px 10px 10px;width:50%&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/posts/puppetconf-luke-1.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;The big keynote of the event to kick off the first day from the author of Puppet himself. This was obviously going to be a tweet worthy affair full of photos&lt;br&gt;and big announcements and it did not disappoint.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Puppet" scheme="http://tech.opentable.co.uk/blog/categories/Puppet/"/>
    
      <category term="Conferences" scheme="http://tech.opentable.co.uk/blog/categories/Conferences/"/>
    
      <category term="PuppetConf 2014" scheme="http://tech.opentable.co.uk/blog/categories/PuppetConf-2014/"/>
    
  </entry>
  
  <entry>
    <title>PuppetConf 2014 - Part 1</title>
    <link href="http://tech.opentable.co.uk//blog/2014/10/06/puppetconf-2014-part-1/"/>
    <id>http://tech.opentable.co.uk//blog/2014/10/06/puppetconf-2014-part-1/</id>
    <published>2014-10-06T11:47:57.000Z</published>
    <updated>2016-10-24T10:26:10.371Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/posts/puppetconf2014.jpg" alt="The start of PuppetConf 2014"></p>
<p>It has been one week since our attendance at this years PuppetConf and we have just now caught up on all the great talks that were<br>given and the projects demonstrated over the 3 day period. Here’s our summary of the event (split into 3 parts), hopefully you will<br>find as much inspiration in the content as we have.</p>
<h2 id="Day-0-Contributor-Summit"><a href="#Day-0-Contributor-Summit" class="headerlink" title="Day 0 - Contributor Summit"></a>Day 0 - Contributor Summit</h2><p>For the first time, this years Puppet Contributor Summit was held the day prior to the conference itself and I think this was a great idea.<br>Most of the Puppetlabs staff and many of the high profile community members were in town for PuppetConf anyway so it made sense. There was<br>roughly 60-70 people in attendance both senior contributors and people new to the community so it was a great mix that led to some<br>fantastic discussions.</p>
<p>The day itself had two tracks: a module track for forge modules and a core track for people contributing to puppet and factor.</p>
<p>Those of you who have seen our <a href="http://forge.puppetlabs.com/opentable" target="_blank" rel="external">forge module page</a> will understand why we chose to stay in the module track.<br>Although I heard there were many great discussions to be had with regards to Puppet 4 in the core track.</p>
<p>Each track was split into three sections: a brief introduction from the track lead Ryan Coleman (<a href="https://twitter.com/ryanycoleman" target="_blank" rel="external">@ryanycoleman</a>),<br>followed by some lighting talks and then several hours of hacking and open discussions.</p>
<h3 id="Lightning-Talks"><a href="#Lightning-Talks" class="headerlink" title="Lightning Talks:"></a>Lightning Talks:</h3><p>Here is a quick overview of the lightening talks from the module track:</p>
<h4 id="Puppet-Analytics-Spencer-Krum-nibalizer"><a href="#Puppet-Analytics-Spencer-Krum-nibalizer" class="headerlink" title="Puppet Analytics (Spencer Krum @nibalizer)"></a>Puppet Analytics (Spencer Krum <a href="https://twitter.com/nibalizer" target="_blank" rel="external">@nibalizer</a>)</h4><p>Spencer gave a quick demonstration of his latest project <a href="http://puppet-analytics.org/" target="_blank" rel="external">puppet-analytics</a>. This problem that this tool was aiming to<br>solve was that at the present time the are no good analytics for the forge modules. The number of downloads listed for each module is very inaccurate<br>and can be easily inflated by (for example) an automated CI process. The point of this web app and it’s corresponding client<br><a href="https://github.com/nibalizer/puppet-analytics-client" target="_blank" rel="external">puppet-analytics-client</a> was to be built into an existing tool chain and for end users to report<br>which modules and versions they were using. It also has the added benefit that we could also get stats for teams using private forges.</p>
<p>Ryan also commented that PuppetLabs has some metrics it uses for it’s own modules that can be found here:<br><a href="http://forge-module-metrics.herokuapp.com/" target="_blank" rel="external">http://forge-module-metrics.herokuapp.com/</a></p>
<h4 id="Puppet-Community-Daniele-Sluijters-daenney"><a href="#Puppet-Community-Daniele-Sluijters-daenney" class="headerlink" title="Puppet Community (Daniele Sluijters @daenney)"></a>Puppet Community (Daniele Sluijters <a href="https://twitter.com/daenney" target="_blank" rel="external">@daenney</a>)</h4><p>Discussion of the shared namespace for community modules: <a href="http://puppet-community.github.io/" target="_blank" rel="external">puppet-community</a>. This talk was about a community project<br>to keep modules in a shared namespace so that everyone can work on them independent of company ownership. There are limitations right now with with<br>regards to the forge e.g. no shared accounts and no easy migration path to move modules between namespaces but working with Ryan on that.</p>
<p>This is how the boxen project works and it seems to work pretty well.</p>
<h4 id="Beaker-Testing-Windows-Environments-Liam-Bennett-liamjbennett-me"><a href="#Beaker-Testing-Windows-Environments-Liam-Bennett-liamjbennett-me" class="headerlink" title="Beaker Testing Windows Environments (Liam Bennett @liamjbennett) - me!!"></a>Beaker Testing Windows Environments (Liam Bennett <a href="https://twitter.com/liamjbennett" target="_blank" rel="external">@liamjbennett</a>) - me!!</h4><p>My talk on hacking beaker to work better for testing windows environments.</p>
<p>Demos and PRs. Discussed more in some of our earlier posts: <a href="/blog/2014/09/01/testing-puppet-with-beaker-pt-dot-2-the-windows-story/">Testing Puppet with Beaker pt.2 - The Windows story</a><br>and <a href="/blog/2014/09/01/testing-puppet-with-beaker-pt-dot-3-testing-roles/">Testing Puppet with Beaker pt.3 - Testing Roles</a></p>
<h4 id="Module-Anti-Patterns-Peter-Souter-petems-Slides"><a href="#Module-Anti-Patterns-Peter-Souter-petems-Slides" class="headerlink" title="Module Anti-Patterns (Peter Souter @petems) - Slides"></a>Module Anti-Patterns (Peter Souter <a href="https://twitter.com/petems" target="_blank" rel="external">@petems</a>) - <a href="http://www.slideshare.net/petems/puppet-module-anti-patterns" target="_blank" rel="external">Slides</a></h4><p>Some interesting patterns here that are still quite preverlant in the modules found on the forge. Hopefully improved tooling and the new Puppet Approved<br>program will help here.</p>
<h4 id="Puppetlabs-ModuleSync-tool-Colleen-Murphy-pdx-krinkle"><a href="#Puppetlabs-ModuleSync-tool-Colleen-Murphy-pdx-krinkle" class="headerlink" title="Puppetlabs ModuleSync tool (Colleen Murphy @pdx_krinkle)"></a>Puppetlabs ModuleSync tool (Colleen Murphy <a href="https://twitter.com/pdx_krinkle" target="_blank" rel="external">@pdx_krinkle</a>)</h4><p>A demonstration of the the tool <a href="https://github.com/puppetlabs/modulesync" target="_blank" rel="external">puppetlabs-modulesync</a> which aims to take out some of the pain of managing common<br>static build files across a number of modules (e.g. a common Rakefile or .travis.yml which the same across almost all modules)</p>
<p>Having used this on a number of our modules now I can say that this in extremely useful and I don’t know how we managed without it. A key use case for us was<br>adding support for puppet 3.7 into our test matrix of our travis.yml file. 1 line change - 1 command - 18 modules updated.</p>
<h4 id="Strict-Variables-Tomas-Doran-bobtfish"><a href="#Strict-Variables-Tomas-Doran-bobtfish" class="headerlink" title="Strict Variables (Tomas Doran @bobtfish)"></a>Strict Variables (Tomas Doran <a href="https://twitter.com/bobtfish" target="_blank" rel="external">@bobtfish</a>)</h4><p>Tomas has one very good point to make here: enable <a href="https://docs.puppetlabs.com/references/latest/configuration.html#strictvariables" target="_blank" rel="external">strict_variables</a>. Many<br>languages have a strict option and Puppet’s makes sure to check for those unknown variable references. The latest version of the<br><a href="https://github.com/puppetlabs/puppetlabs_spec_helper" target="_blank" rel="external">puppetlabs_spec_helper</a> supports adding this setting with an environment variable so that you can now<br>add this into your testing matrix.</p>
<p>We have enabled this on our open source modules and it did indeed surfice a few bugs so go and do it now.</p>
<h4 id="Puppet-Documentation-Linting-Peter-Souter-petems"><a href="#Puppet-Documentation-Linting-Peter-Souter-petems" class="headerlink" title="Puppet Documentation Linting (Peter Souter @petems)"></a>Puppet Documentation Linting (Peter Souter <a href="https://twitter.com/petems" target="_blank" rel="external">@petems</a>)</h4><p>While we have very good linking for our puppet manifests themselves thanks to the <a href="http://puppet-lint.com/" target="_blank" rel="external">puppet-lint</a> project. We still do not have any<br>coverage for our documentation of those manifests. That is where Peter’s <a href="https://github.com/petems/puppet-doc-lint" target="_blank" rel="external">puppet-doc-lint</a> project comes in and aims<br>to lint each of you manifests for correct rdoc documentation.</p>
<p>This only supports puppet 3.4.3 right now but it is a useful tool and demonstrations something functional in an area that is missing from the current crop of<br>community tooling. This is going to become more useful as we want to have good documentation for Puppet Approved status.</p>
<p>It is also worth noting that PuppetLabs themselves have been doing some work in this area with<br><a href="https://github.com/puppetlabs/puppetlabs-strings/" target="_blank" rel="external">puppet-strings</a>. This projects works on puppet 3.6 + and support yard doc but is roughly the same idea.</p>
<h4 id="Quick-Survey-Michael-Stahnke-stahnma"><a href="#Quick-Survey-Michael-Stahnke-stahnma" class="headerlink" title="Quick Survey (Michael Stahnke @stahnma)"></a>Quick Survey (Michael Stahnke <a href="https://twitter.com/stahnma" target="_blank" rel="external">@stahnma</a>)</h4><p>Michael here decided to use the opportunity of having everyone in the room to ask a few questions regarding the state of puppet use and the platforms it’s<br>deployed on. Not too many surprises here: Debian (mostly ubuntu 12) and RedHat (mostly centos 6) dominate with a small grouping of other platforms like AIX and<br>Solaris in toe. Some poor individuals still have ubuntu 8 and 10 in production but I won’t name name’s because we have all been in that position before. No<br>mention of windows but then I did bring that up in my own talk so I think that was covered already.</p>
<h3 id="Hacking-and-Discussions"><a href="#Hacking-and-Discussions" class="headerlink" title="Hacking and Discussions"></a>Hacking and Discussions</h3><p>The second part of the day was the hacking and discussions part. This was more un-conference style with variables tables put together to discuss various topics,<br>try and resolves issues or hack on projects. There were four main areas that I noticed: module testing, windows, docker, forge improvements (apologies if I<br>missed your topic/table).</p>
<h4 id="Module-Testing"><a href="#Module-Testing" class="headerlink" title="Module Testing"></a>Module Testing</h4><p>This was probably the most common topic and several tables were set up around this idea but a huge range of things were discussed. Some people wanted to know<br>about how to get up and running with beaker tests using vagrant+vagrant cloud, some wanted to discuss specific platform issues (windows, docker, solaris), other<br> wanted to discuss how best to scale out the tests once you have them.</p>
<p>There was some discussion based around the tools like puppet-doc-lint that were demonstrated during the lightning talks and it’s good to see these missing<br>aspects of the testing tool chain getting some light.</p>
<p>It’s nice to think that we have moved to this stage now where we have all the tools to support a full development tool chain for puppet and that most of the<br>discussion was around improving and maturing what we have.</p>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>Docker is one of those tools that can be considered the latest hotness so it’s no surprise that it gained some interest here also. Many people wanted to see it<br>in use and demonstrated and to discuss it’s use either from the point of view of being able to test with it or test against it.</p>
<p>I see this topic getting a lot more coverage in the future as more and more teams move into this space.</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Led by myself, Drewi Wilson and Travis Fields (<a href="https://twitter.com/tefields" target="_blank" rel="external">@tefields</a>) the two aims for this discussion were to gather input/feedback from people using<br>the existing windows modules and to try and discover areas in the windows ecosystem that were not currently managed (either well or at all) by Puppet.</p>
<p>We got some fantastic feedback we got regarding our OpenTable modules - thank you to everyone who was there any everyone else who reached out about that.</p>
<p>We also managed to start to populate a list of things that need some work. You can contribute to that list<br><a href="https://docs.google.com/document/d/1bwgTo4D7lL8REA1s-IIKlfMrvY434Xn0cyZ7b1X-TwQ" target="_blank" rel="external">here</a></p>
<p>There was also some discussion of using MCollective on Windows. This has been a little painful in the past (I should blog about this in the future) but it will<br>be getting a little more love going forward. Generally PuppetLabs is very aware of the orchestration space and will be looking into solving this problem with<br>it’s tools going forward.</p>
<h4 id="Forge-Improvements"><a href="#Forge-Improvements" class="headerlink" title="Forge Improvements"></a>Forge Improvements</h4><p>Given that this was the Module track it was obvious that at some point we would all want to discuss improvement that we would want to see in the puppet forge. Ryan<br>led the table here and there was lots of be said by all.</p>
<p>A couple of interesting documents emerged that you might be interested in:</p>
<ul>
<li><a href="https://docs.google.com/document/d/1N8U_8UnIGFHC1Q6aTyLgx1d6wvvjuyTT1EO-OYSIu3k" target="_blank" rel="external">Suggestions for the Puppet Approved module criteria</a></li>
<li><a href="https://docs.google.com/document/d/1gwoM8xHnWaRQ3Jqce0oursI_ts5BWnHEUVXRQuIh6Yk" target="_blank" rel="external">Forge Improvements</a></li>
</ul>
<p>There was also some discussion of how best to pull stats out from the forge. Many people either scrape the API, use the API to take a dump of the whole of the forge<br>but none of these approaches are best for either the user or for the forge site itself. PuppetLabs uses various approaches to this internally depending on the use<br>case. Such use cases include: “who is using my module?” or “who is using the bit of code?”. There should be improvements to the forge to make answering these sorts<br>of questions a little easier in the future.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The contributor summit was personally one of the most useful days of the conference. Being able to see the lastest tooling and discuss the latest problems is always<br>very useful to module authors like ourselves. Hopefully you’ll find this summary as useful as we do.</p>
<p>Next up Day 1 - PuppetConf proper..</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/posts/puppetconf2014.jpg&quot; alt=&quot;The start of PuppetConf 2014&quot;&gt;&lt;/p&gt;
&lt;p&gt;It has been one week since our attendance at this years PuppetConf and we have just now caught up on all the great talks that were&lt;br&gt;given and the projects demonstrated over the 3 day period. Here’s our summary of the event (split into 3 parts), hopefully you will&lt;br&gt;find as much inspiration in the content as we have.&lt;/p&gt;
&lt;h2 id=&quot;Day-0-Contributor-Summit&quot;&gt;&lt;a href=&quot;#Day-0-Contributor-Summit&quot; class=&quot;headerlink&quot; title=&quot;Day 0 - Contributor Summit&quot;&gt;&lt;/a&gt;Day 0 - Contributor Summit&lt;/h2&gt;&lt;p&gt;For the first time, this years Puppet Contributor Summit was held the day prior to the conference itself and I think this was a great idea.&lt;br&gt;Most of the Puppetlabs staff and many of the high profile community members were in town for PuppetConf anyway so it made sense. There was&lt;br&gt;roughly 60-70 people in attendance both senior contributors and people new to the community so it was a great mix that led to some&lt;br&gt;fantastic discussions.&lt;/p&gt;
&lt;p&gt;The day itself had two tracks: a module track for forge modules and a core track for people contributing to puppet and factor.&lt;/p&gt;
&lt;p&gt;Those of you who have seen our &lt;a href=&quot;http://forge.puppetlabs.com/opentable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;forge module page&lt;/a&gt; will understand why we chose to stay in the module track.&lt;br&gt;Although I heard there were many great discussions to be had with regards to Puppet 4 in the core track.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Puppet" scheme="http://tech.opentable.co.uk/blog/categories/Puppet/"/>
    
      <category term="Conferences" scheme="http://tech.opentable.co.uk/blog/categories/Conferences/"/>
    
      <category term="PuppetConf 2014" scheme="http://tech.opentable.co.uk/blog/categories/PuppetConf-2014/"/>
    
  </entry>
  
</feed>
